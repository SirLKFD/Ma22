@model ASI.Basecode.Services.ServiceModels.BrowseTrainingsViewModel
@{
    ViewData["Title"] = "UserTrainings";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
    bool showAll = Context.Request.Query["showAll"] == "true";
    var trainingsToDisplay = showAll ? Model.Trainings : Model.Trainings.Take(9);
}


<div class="flex flex-col mt-10 mb-20 justify-center items-center h-[50vh] gap-10">
    <h1 class="md:text-5xl lg:text-6xl font-weight-bold">
        Enrolled Trainings
    </h1>
    <p class="font-semibold">Continue where you left off.</p>
    <div class="relative w-1/2 space-r-2">
        <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
            <span class="material-symbols-outlined text-gray-400 text-xl">search</span>
        </div>
        <input id="usertrainings-search-input" type="search" name="search"
                class="w-full h-12 rounded-xl border border-gray-300 px-5 py-4 pr-[90px] text-md text-gray-900 shadow-sm focus:outline-none focus:ring-2 focus:ring-[#EAC231] transition"
                placeholder="What are you looking for?" value="@Context.Request.Query["search"]" />
        <button id="usertrainings-search-btn" type="button"
                class="absolute top-[6px] right-2 rounded-xl bg-[#EAC231] px-4 py-2 text-sm font-medium text-black hover:bg-[#cfa221] transition">
            Search
        </button>
    </div>
</div>

<div class="flex flex-col justify-center w-screen bg-white -mx-20 p-5 gap-5 mb-20">
    <div class="flex flex-col items-center text-center gap-5 mb-10">
        <h2 class="text-4xl font-weight-bold">Explore by Category</h2>
        <p>Choose from our popular learning paths</p>
    </div>
    <div class="flex flex-wrap justify-center gap-20" id="usertrainings-category-list-container">
        <button id="usertrainings-category-left-btn" class="mr-2 rounded bg-[#EAC231] px-4 py-2 font-semibold text-black shadow transition hover:bg-[#cfa221]">&#8592;</button>
        <div id="usertrainings-category-cards-wrapper" class="flex flex-wrap justify-center gap-20">
        @if (Model != null && Model.Categories.Any())
        {
            foreach (var category in Model.Categories)
            {
                <div class="category-card flex flex-col items-center justify-center
                                        bg-white text-black
                                        w-[150px] aspect-square
                                        p-4 rounded-xl gap-4
                                        shadow-md hover:cursor-pointer
                                        hover:scale-110 transition-all duration-300"
                     data-category-id="@category.Id" data-category-description="@category.Description">
                    <span class="material-symbols-outlined
                                             text-black bg-[#FFE9C6]
                                             p-2 rounded-xl text-[40px]">
                        code
                    </span>
                    <p class="font-semibold text-center text-sm">@category.CategoryName</p>
                </div>
            }
        }
        </div>
        <button id="usertrainings-category-right-btn" class="ml-2 rounded bg-[#EAC231] px-4 py-2 font-semibold text-black shadow transition hover:bg-[#cfa221]">&#8594;</button>
    </div>

</div>

<div class="flex flex-col items-center my-10">
    <h2 id="usertrainings-title" class="text-4xl font-weight-bold">Trainings</h2>
    <p id="usertrainings-subtitle">Hand-picked courses from our expert instructors</p>
    <div id="usertrainings-loading" class="mt-2" style="display:none;">
        <span class="material-symbols-outlined animate-spin text-3xl">hourglass_empty</span>
    </div>
</div>

<div id="usertrainings-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 mb-20 mx-20">
    @if (Model != null && Model.Trainings.Any())
    {
        foreach (var training in trainingsToDisplay)
        {
            <div class="flex min-h-[420px] flex-col overflow-hidden rounded-2xl border border-gray-200 bg-white shadow-md transition hover:shadow-xl">
                <!-- Cover Image -->
                <div class="h-[180px]">
                    @if (!string.IsNullOrEmpty(training.CoverPicture))
                    {
                        <img class="h-full w-full object-cover" src="@training.CoverPicture" alt="Cover Image" />
                    }
                    else
                    {
                        <div class="flex h-full w-full items-center justify-center bg-gradient-to-br from-[#640A16] via-[#8B1538] to-[#640A16] text-center text-sm font-medium text-white">
                            <span class="material-symbols-outlined text-4xl opacity-50">image</span>
                            <p class="ml-2">No Cover Image</p>
                        </div>
                    }
                </div>
                <!-- Details -->
                <div class="flex flex-grow flex-col p-4">
                    <!-- Header -->
                    <div class="mb-2 flex items-center justify-between">
                        <h2 class="text-xl font-bold text-[#222]">@training.TrainingName</h2>
                    </div>
                    <p class="line-clamp-4 text-sm text-gray-600">@training.Description</p>
                    <!-- Footer -->
                    <div class="mt-auto flex items-end justify-between pt-4 text-xs text-gray-500">
                        <div>
                            <p><strong>Modified:</strong> @training.UpdatedTime.ToString("MMM dd, yyyy")</p>
                            <p><strong>By:</strong> @training.AccountFirstName @training.AccountLastName</p>
                        </div>
                        <a href="#" class="rounded-full bg-[#640A16] px-4 py-2 text-xs font-semibold text-white transition hover:bg-[#4e0712]">
                            Access
                        </a>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-span-3 text-center text-gray-500 py-8">No trainings found.</div>
    }

</div>
@if (!showAll && Model.Trainings.Count > 9)
{
    <div class="flex justify-center mt-5">
        <button id="loadMoreUserTrainingsBtn" class="cursor-pointer">
            <span class="material-symbols-outlined animate-bounce text-[50px]">
                keyboard_double_arrow_down
            </span>
        </button>
    </div>
}

@section Scripts {
    <script>
        // Category navigation logic
        let userCategoryStart = 0;
        const userMaxVisible = 6;
        const userWrapper = document.getElementById('usertrainings-category-cards-wrapper');
        const userCategories = Array.from(userWrapper.querySelectorAll('.category-card'));
        function updateUserCategoryVisibility(animatedDirection = null) {
            if (animatedDirection) {
                userWrapper.style.transition = 'transform 0.7s cubic-bezier(0.22, 1, 0.36, 1)';
                userWrapper.style.transform = `translateX(${animatedDirection === 'left' ? '80px' : '-80px'})`;
                setTimeout(() => {
                    userWrapper.style.transform = 'translateX(0)';
                }, 700);
            }
            userCategories.forEach((el, idx) => {
                el.style.display = (idx >= userCategoryStart && idx < userCategoryStart + userMaxVisible) ? '' : 'none';
            });
        }
        document.getElementById('usertrainings-category-left-btn').addEventListener('click', function() {
            if (userCategoryStart > 0) {
                userCategoryStart--;
                updateUserCategoryVisibility('left');
            }
        });
        document.getElementById('usertrainings-category-right-btn').addEventListener('click', function() {
            if (userCategoryStart + userMaxVisible < userCategories.length) {
                userCategoryStart++;
                updateUserCategoryVisibility('right');
            }
        });
        updateUserCategoryVisibility();

        // SEARCH logic
        const searchInput = document.getElementById('usertrainings-search-input');
        const searchBtn = document.getElementById('usertrainings-search-btn');
        function doUserTrainingsSearch() {
            const search = searchInput.value.trim();
            document.getElementById('usertrainings-loading').style.display = '';
            fetch(`/User/SearchUserTrainings?search=${encodeURIComponent(search)}`)
                .then(response => response.text())
                .then(html => {
                    // Find the grid container for trainings
                    const grid = document.getElementById('usertrainings-container');
                    if (grid) {
                        grid.innerHTML = html;
                    }
                    document.getElementById('usertrainings-title').textContent = 'Trainings';
                    document.getElementById('usertrainings-subtitle').innerHTML = 'Hand-picked courses from our expert instructors';
                    document.getElementById('usertrainings-title').scrollIntoView({ behavior: 'smooth', block: 'start' });
                })
                .finally(() => {
                    document.getElementById('usertrainings-loading').style.display = 'none';
                });
        }
        searchBtn.addEventListener('click', doUserTrainingsSearch);
        searchInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                doUserTrainingsSearch();
            }
        });

        // Category filter logic
        document.querySelectorAll('.category-card').forEach(card => {
            card.addEventListener('click', function() {
                const categoryId = this.getAttribute('data-category-id');
                const categoryName = this.querySelector('p').textContent;
                const categoryDescription = this.getAttribute('data-category-description') || '';
                document.getElementById('usertrainings-loading').style.display = '';
                fetch(`/User/UserTrainingsByCategory?categoryId=${categoryId}`)
                    .then(response => response.text())
                    .then(html => {
                        document.getElementById('usertrainings-container').innerHTML = html;
                        document.getElementById('usertrainings-title').textContent = categoryName;
                        document.getElementById('usertrainings-subtitle').innerHTML = categoryDescription;
                        document.getElementById('usertrainings-title').scrollIntoView({ behavior: 'smooth', block: 'start' });
                    })
                    .finally(() => {
                        document.getElementById('usertrainings-loading').style.display = 'none';
                    });
            });
        });

        // LOAD MORE logic for user trainings
        let userCurrentlyDisplayed = @(trainingsToDisplay.Count());
        const userTotalTrainings = @Model.Trainings.Count;
        const userPageSize = 9;
        document.getElementById("loadMoreUserTrainingsBtn")?.addEventListener("click", function () {
            const button = this;
            const buttonIcon = button.querySelector('.material-symbols-outlined');
            // Show loading state
            buttonIcon.textContent = 'hourglass_empty';
            buttonIcon.classList.add('animate-spin');
            button.disabled = true;
            fetch(`/User/LoadMoreUserTrainings?skip=${userCurrentlyDisplayed}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(data => {
                    const container = document.getElementById("usertrainings-container");
                    container.insertAdjacentHTML('beforeend', data);
                    // Update the count
                    userCurrentlyDisplayed += userPageSize;
                    // Hide button if all trainings are loaded
                    if (userCurrentlyDisplayed >= userTotalTrainings) {
                        button.style.display = "none";
                    } else {
                        // Reset button state
                        buttonIcon.textContent = 'keyboard_double_arrow_down';
                        buttonIcon.classList.remove('animate-spin');
                        buttonIcon.classList.add('animate-bounce');
                        button.disabled = false;
                    }
                })
                .catch(error => {
                    console.error("Error loading more user trainings:", error);
                    // Reset button state on error
                    buttonIcon.textContent = 'keyboard_double_arrow_down';
                    buttonIcon.classList.remove('animate-spin');
                    buttonIcon.classList.add('animate-bounce');
                    button.disabled = false;
                    alert('Failed to load more trainings. Please try again.');
                });
        });
    </script>
}

