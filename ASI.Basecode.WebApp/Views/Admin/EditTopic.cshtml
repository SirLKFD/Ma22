@model TopicViewModel
<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />

<div id="editTopic" class="fixed inset-0 z-50 flex hidden items-center justify-center bg-black bg-opacity-40 backdrop-blur-sm">
    <div class="flex max-h-[90vh] w-full max-w-5xl flex-col rounded-xl bg-white p-6 text-black shadow-lg">

        <div class="flex">
            <a onclick="closeEditTopic()" class="hover-pointer">
                <span class="material-symbols-outlined text-[50px]">arrow_circle_left</span>
            </a>
        </div>
        <div class="align-items-center mx-5 my-3 flex w-full justify-start">
            <h1 class="font-weight-bold text-2xl uppercase">Edit Topic</h1>
        </div>
        <form asp-controller="AdminTopic" asp-action="EditTopic" method="post" enctype="multipart/form-data" id="editTopicForm">
            <input type="hidden" id="TopicIdEdit" name="Id" />
            <input type="hidden" id="TrainingIdEdit" name="TrainingId" />
            <input type="hidden" id="DeletedMediaIds" name="DeletedMediaIds" />
            <div class="flex">
                <!-- Left side with form fields -->
                <div class="flex w-1/2 flex-col">
                    <div class="mx-5 mt-2">
                        <label asp-for="TopicName" class="mb-2 block text-sm font-medium text-black">Topic Name</label>
                        <input asp-for="TopicName" id="TopicNameEdit" class="w-full rounded-md border border-gray-300 px-3 py-2 text-black focus:outline-none focus:ring-2 focus:ring-[#EAC231]" />
                        <span asp-validation-for="TopicName" class="text-danger"></span>
                    </div>

                    <div class="mx-5 mt-2">
                        <label asp-for="Description" class="mb-2 block text-sm font-medium text-black">Description</label>
                        <textarea asp-for="Description" id="DescriptionEdit" rows="12" class="w-full rounded-md border border-gray-300 px-3 py-2 text-black focus:outline-none focus:ring-2 focus:ring-[#EAC231]"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>

                    <button type="submit" class="mx-5 mt-4 rounded-lg bg-[#FFE9C6] px-4 py-2 font-semibold">Save Changes</button>
                </div>

                <!-- Right side content -->
                <div class="flex w-1/2 flex-col gap-2 rounded-lg bg-[#640A16] p-4 text-white">
                    <h2 class="text-2xl font-semibold">Resources</h2>
                    <p class="text-sm text-gray-300">Maximum 100MB per category (Videos, Images, Documents)</p>

                    <div class="flex flex-1 flex-col gap-2">
                        <!-- Videos -->
                        <div class="flex flex-1 flex-col">
                            <div class="flex justify-between">
                                <p class="text-lg">Videos</p>
                                <div id="VideoSizeDisplay" class="text-xs mt-1">Total video size: 0.00MB / 100MB</div>
                                <label for="VideoFilesEdit" class="cursor-pointer">
                                    <input type="file"
                                           name="VideoFilesEdit"
                                           id="VideoFilesEdit"
                                           accept="video/*"
                                           multiple
                                           class="hidden" />
                                    <div class="flex items-center text-white">
                                        <span class="material-symbols-outlined">add_photo_alternate</span>
                                        <h1 class="font-semibold uppercase">Upload</h1>
                                    </div>
                                </label>
                            </div>
                            <div class="flex w-full flex-1 flex-col items-center rounded-xl bg-white p-2">
                                <div id="VideoPreview" class="flex h-full w-full items-center gap-2 overflow-x-auto text-black">
                                </div>
                            </div>
                        </div>

                        <!-- Images -->
                        <div class="flex flex-1 flex-col">
                            <div class="flex justify-between">
                                <p class="text-lg">Images</p>
                                <div id="ImageSizeDisplay" class="text-xs mt-1">Total image size: 0.00MB / 100MB</div>
                                <label for="ImageFilesEdit" class="cursor-pointer">
                                    <input type="file"
                                           name="ImageFilesEdit"
                                           id="ImageFilesEdit"
                                           accept="image/*"
                                           multiple
                                           class="hidden" />
                                    <div class="flex items-center text-white">
                                        <span class="material-symbols-outlined">add_photo_alternate</span>
                                        <h1 class="font-semibold uppercase">Upload</h1>
                                    </div>
                                </label>
                            </div>
                            <div class="flex w-full flex-1 flex-col items-center rounded-xl bg-white p-2">
                                <div id="ImagePreview" class="flex h-full w-full items-center gap-2 overflow-x-auto text-black">
                                </div>
                            </div>
                        </div>

                        <!-- Documents -->
                        <div class="flex flex-1 flex-col">
                            <div class="flex justify-between">
                                <div class="flex flex-col">
                                    <p class="text-lg">Documents</p>
                                    <p class="text-xs text-gray-300">PDF, Word, Excel, PowerPoint</p>
                                    <div id="DocumentSizeDisplay" class="text-xs mt-1">Total document size: 0.00MB / 100MB</div>
                                </div>
                                <label for="DocumentFilesEdit" class="cursor-pointer">
                                    <input type="file"
                                           name="DocumentFilesEdit"
                                           id="DocumentFilesEdit"
                                           accept="application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-powerpoint,application/vnd.openxmlformats-officedocument.presentationml.presentation"
                                           multiple
                                           class="hidden" />
                                    <div class="flex items-center text-white">
                                        <span class="material-symbols-outlined">add_photo_alternate</span>
                                        <h1 class="font-semibold uppercase">Upload</h1>
                                    </div>
                                </label>
                            </div>
                            <div class="flex w-full flex-1 flex-col items-center rounded-xl bg-white p-2">
                                <div id="DocumentPreview" class="flex h-full w-full items-center gap-2 overflow-x-auto text-black">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<script>
    function closeEditTopic() {
        document.getElementById('editTopic').classList.add('hidden');
        // Clear form
        document.getElementById('VideoPreview').innerHTML = '';
        document.getElementById('ImagePreview').innerHTML = '';
        document.getElementById('DocumentPreview').innerHTML = '';
        document.getElementById('VideoFilesEdit').value = '';
        document.getElementById('ImageFilesEdit').value = '';
        document.getElementById('DocumentFilesEdit').value = '';
        document.getElementById('DeletedMediaIds').value = '';
    }

    function getFileExtension(filename) {
        if (!filename) return '';
        return filename.split('.').pop().toUpperCase();
    }

    function getFileExtensionColor(extension) {
        switch(extension.toLowerCase()) {
            case 'pdf': return 'bg-red-500';
            case 'doc':
            case 'docx': return 'bg-blue-500';
            case 'xls':
            case 'xlsx': return 'bg-green-500';
            case 'ppt':
            case 'pptx': return 'bg-orange-500';
            default: return 'bg-gray-500';
        }
    }

    function isDocumentFile(mediaType, filename) {
        // Check by MIME type first
        if (mediaType) {
            const type = mediaType.toLowerCase();
            if (type.includes('pdf') ||
                type.includes('word') ||
                type.includes('excel') ||
                type.includes('powerpoint') ||
                type.includes('spreadsheet') ||
                type.includes('presentation') ||
                type.includes('msword') ||
                type.includes('vnd.openxmlformats') ||
                type.includes('vnd.ms-')) {
                return true;
            }
        }

        // Check by file extension as fallback
        if (filename) {
            const ext = filename.toLowerCase();
            return ext.endsWith('.pdf') ||
                   ext.endsWith('.doc') ||
                   ext.endsWith('.docx') ||
                   ext.endsWith('.xls') ||
                   ext.endsWith('.xlsx') ||
                   ext.endsWith('.ppt') ||
                   ext.endsWith('.pptx');
        }

        return false;
    }

    function handleDeleteMedia(div, mediaId) {
        let deleted = document.getElementById('DeletedMediaIds').value;
        let arr = deleted ? deleted.split(',') : [];
        if (!arr.includes(mediaId.toString())) arr.push(mediaId);
        document.getElementById('DeletedMediaIds').value = arr.join(',');
        // Get parent ID before removing the div
        const parentId = div.parentElement ? div.parentElement.id : '';
        div.remove();
        if (parentId === 'VideoPreview') updateTotalResourceSize('video');
        if (parentId === 'ImagePreview') updateTotalResourceSize('image');
        if (parentId === 'DocumentPreview') updateTotalResourceSize('document');
    }

    function updateSizeInfo(inputId, previewId, type) {
        const files = document.getElementById(inputId).files;
        let totalSize = 0;
        for (let i = 0; i < files.length; i++) {
            totalSize += files[i].size;
        }

        const sizeInMB = (totalSize / (1024 * 1024)).toFixed(2);
        let sizeInfo = document.getElementById(`${previewId}-size`);

        if (!sizeInfo) {
            sizeInfo = document.createElement('div');
            sizeInfo.id = `${previewId}-size`;
            sizeInfo.className = 'text-xs text-center mt-1';
            document.getElementById(previewId).appendChild(sizeInfo);
        }

    }

    function openEditTopic(topicId, trainingId, topicName, description, mediaCount, accountFirstName, accountLastName, updatedTime, media) {
        media = Array.isArray(media) ? media : [];
        console.log('Opening edit modal with:', { topicId, trainingId, topicName, description, mediaCount, accountFirstName, accountLastName, updatedTime, media });

        // Set the values in the form
        document.getElementById('TopicNameEdit').value = topicName;
        document.getElementById('DescriptionEdit').value = description;
        document.getElementById('TrainingIdEdit').value = trainingId;
        document.getElementById('TopicIdEdit').value = topicId;

        // Separate by type using improved logic
        const images = media.filter(m => m.MediaType && m.MediaType.toLowerCase().includes('image'));
        const videos = media.filter(m => m.MediaType && m.MediaType.toLowerCase().includes('video'));
        const documents = media.filter(m => isDocumentFile(m.MediaType, m.Name));

        console.log('Filtered media:', { images, videos, documents });

        document.getElementById('editTopic').classList.remove('hidden');

        document.getElementById('VideoFilesEdit').value = '';
        document.getElementById('ImageFilesEdit').value = '';
        document.getElementById('DocumentFilesEdit').value = '';
        document.getElementById('DeletedMediaIds').value = '';

        // Video preview
        const videoPreview = document.getElementById('VideoPreview');
        videoPreview.innerHTML = '';
        if (videos.length) {
            videos.forEach(m => {
                const div = document.createElement('div');
                div.className = 'flex flex-col items-center min-w-[60px] cursor-pointer media-item';
                div.setAttribute('data-media-id', m.Id);
                div.innerHTML = `
                    <span class="material-symbols-outlined text-black" style="font-size:30px">movie</span>
                    <span class='w-[60px] truncate text-center text-xs text-black'>${m.Name ? m.Name.substring(0, 10) : ''}</span>
                    <button type='button' class='delete-media-btn' data-media-id='${m.Id}' style='color:red;'>
                        <span class="material-symbols-outlined" style='font-size: 20px'>delete</span>
                    </button>`;
                div.onclick = function(e) {
                    if (e.target.closest('.delete-media-btn')) {
                        handleDeleteMedia(div, m.Id);
                        e.stopPropagation();
                    } else {
                        window.open(m.MediaUrl, '_blank');
                    }
                };
                videoPreview.appendChild(div);
            });
        }

        // Image preview
        const imagePreview = document.getElementById('ImagePreview');
        imagePreview.innerHTML = '';
        if (images.length) {
            images.forEach(m => {
                const div = document.createElement('div');
                div.className = 'flex flex-col items-center min-w-[60px] cursor-pointer media-item';
                div.setAttribute('data-media-id', m.Id);
                div.innerHTML = `
                    <span class="material-symbols-outlined text-black" style="font-size:30px">image</span>
                    <span class='w-[60px] truncate text-center text-xs text-black'>${m.Name ? m.Name.substring(0, 10) : ''}</span>
                    <button type='button' class='delete-media-btn' data-media-id='${m.Id}' style='color:red;'>
                        <span class="material-symbols-outlined" style='font-size: 20px'>delete</span>
                    </button>`;
                div.onclick = function(e) {
                    if (e.target.closest('.delete-media-btn')) {
                        handleDeleteMedia(div, m.Id);
                        e.stopPropagation();
                    } else {
                        window.open(m.MediaUrl, '_blank');
                    }
                };
                imagePreview.appendChild(div);
            });
        }

        // Document preview
        const documentPreview = document.getElementById('DocumentPreview');
        documentPreview.innerHTML = '';
        if (documents.length) {
            documents.forEach(m => {
                const div = document.createElement('div');
                div.className = 'flex flex-col items-center min-w-[60px] cursor-pointer media-item';
                div.setAttribute('data-media-id', m.Id);

                const extension = getFileExtension(m.Name || '');
                const colorClass = getFileExtensionColor(extension);

                div.innerHTML = `
                    <span class="material-symbols-outlined text-black" style="font-size:30px">description</span>
                    <span class='w-[60px] truncate text-center text-xs text-black'>${m.Name ? m.Name.substring(0, 10) : ''}</span>
                    ${extension ? `<span class='${colorClass} mt-1 rounded px-2 py-1 text-xs font-bold text-white'>${extension}</span>` : ''}
                    <button type='button' class='delete-media-btn' data-media-id='${m.Id}' style='color:red;'>
                        <span class="material-symbols-outlined" style='font-size: 20px'>delete</span>
                    </button>`;
                div.onclick = function(e) {
                    if (e.target.closest('.delete-media-btn')) {
                        handleDeleteMedia(div, m.Id);
                        e.stopPropagation();
                    } else {
                        window.open(m.MediaUrl, '_blank');
                    }
                };
                documentPreview.appendChild(div);
            });
        }
    }

    function addNewFilePreview(previewId, file, icon, inputId) {
        const preview = document.getElementById(previewId);
        const div = document.createElement('div');
        div.className = 'flex flex-col items-center min-w-[60px] cursor-pointer media-item new';
        div.setAttribute('data-filesize', file.size); // Ensure new file previews have data-filesize

        let fileInfo = '';
        if (inputId === 'DocumentFilesEdit') {
            const extension = getFileExtension(file.name);
            const colorClass = getFileExtensionColor(extension);
            fileInfo = `<span class='${colorClass} mt-1 rounded px-2 py-1 text-xs font-bold text-white'>${extension}</span>`;
        }

        div.innerHTML = `
            <span class="material-symbols-outlined text-black" style="font-size:30px">${icon}</span>
            <span class='w-[60px] truncate text-center text-xs text-black'>${file.name.substring(0, 10)}</span>
            ${fileInfo}
            <button type='button' class='delete-media-btn' style='color:red;'>
                <span class="material-symbols-outlined" style='font-size: 20px'>delete</span>
            </button>`;

        div.querySelector('.delete-media-btn').onclick = function(e) {
            const parentId = div.parentElement ? div.parentElement.id : '';
            div.remove();
            e.stopPropagation();
            // If no more .media-item.new in this preview, clear the file input
            if (parentId && document.querySelectorAll(`#${parentId} .media-item.new`).length === 0) {
                if (parentId === 'VideoPreview') document.getElementById('VideoFilesEdit').value = '';
                if (parentId === 'ImagePreview') document.getElementById('ImageFilesEdit').value = '';
                if (parentId === 'DocumentPreview') document.getElementById('DocumentFilesEdit').value = '';
            }
            if (parentId === 'VideoPreview') updateTotalResourceSize('video');
            if (parentId === 'ImagePreview') updateTotalResourceSize('image');
            if (parentId === 'DocumentPreview') updateTotalResourceSize('document');
        };
        preview.appendChild(div);
    }

    function getExistingMediaSizes(previewId) {
        // Sum file sizes of existing media in the preview (data-filesize attribute)
        let total = 0;
        document.querySelectorAll(`#${previewId} .media-item[data-filesize]`).forEach(div => {
            total += parseInt(div.getAttribute('data-filesize')) || 0;
        });
        return total;
    }

    function updateTotalResourceSize(type) {
        let inputId, previewId, displayId;
        if (type === 'video') {
            inputId = 'VideoFilesEdit'; previewId = 'VideoPreview'; displayId = 'VideoSizeDisplay';
        } else if (type === 'image') {
            inputId = 'ImageFilesEdit'; previewId = 'ImagePreview'; displayId = 'ImageSizeDisplay';
        } else if (type === 'document') {
            inputId = 'DocumentFilesEdit'; previewId = 'DocumentPreview'; displayId = 'DocumentSizeDisplay';
        }
        const files = document.getElementById(inputId).files;
        let newFilesSize = 0;
        for (let i = 0; i < files.length; i++) {
            newFilesSize += files[i].size;
        }
        let existingFilesSize = getExistingMediaSizes(previewId);
        let totalSize = newFilesSize + existingFilesSize;
        const sizeInMB = (totalSize / (1024 * 1024)).toFixed(2);
        const display = document.getElementById(displayId);
        if (display) {
            display.textContent = `Total ${type} size: ${sizeInMB}MB / 100MB`;
            display.style.color = totalSize > 100 * 1024 * 1024 ? 'red' : '#39d353'; // bright green
        }
    }

    document.getElementById('ImageFilesEdit').addEventListener('change', function(event) {
        const preview = document.getElementById('ImagePreview');
        Array.from(event.target.files).forEach(file => {
            addNewFilePreview('ImagePreview', file, 'image', 'ImageFilesEdit');
        });
        updateSizeInfo('ImageFilesEdit', 'ImagePreview', 'image');
    });

    document.getElementById('VideoFilesEdit').addEventListener('change', function(event) {
        const preview = document.getElementById('VideoPreview');
        Array.from(event.target.files).forEach(file => {
            addNewFilePreview('VideoPreview', file, 'movie', 'VideoFilesEdit');
        });
        updateSizeInfo('VideoFilesEdit', 'VideoPreview', 'video');
    });

    document.getElementById('DocumentFilesEdit').addEventListener('change', function(event) {
        const preview = document.getElementById('DocumentPreview');
        Array.from(event.target.files).forEach(file => {
            addNewFilePreview('DocumentPreview', file, 'description', 'DocumentFilesEdit');
        });
        updateSizeInfo('DocumentFilesEdit', 'DocumentPreview', 'document');
    });

    // Form validation
    document.getElementById('editTopicForm').addEventListener('submit', function(e) {
        const MAX_SIZE = 100 * 1024 * 1024; // 100MB in bytes

        // Check video files total size
        const videoFiles = document.getElementById('VideoFilesEdit').files;
        let videoTotalSize = 0;
        for (let i = 0; i < videoFiles.length; i++) {
            videoTotalSize += videoFiles[i].size;
        }
        if (videoTotalSize > MAX_SIZE) {
            alert('Total size of videos exceeds 100MB limit');
            e.preventDefault();
            return;
        }

        // Check image files total size
        const imageFiles = document.getElementById('ImageFilesEdit').files;
        let imageTotalSize = 0;
        for (let i = 0; i < imageFiles.length; i++) {
            imageTotalSize += imageFiles[i].size;
        }
        if (imageTotalSize > MAX_SIZE) {
            alert('Total size of images exceeds 100MB limit');
            e.preventDefault();
            return;
        }

        // Check document files total size
        const documentFiles = document.getElementById('DocumentFilesEdit').files;
        let documentTotalSize = 0;
        for (let i = 0; i < documentFiles.length; i++) {
            documentTotalSize += documentFiles[i].size;
        }
        if (documentTotalSize > MAX_SIZE) {
            alert('Total size of documents exceeds 100MB limit');
            e.preventDefault();
            return;
        }
    });

    // Patch addNewFilePreview to call updateTotalResourceSize
    const origAddNewFilePreview = addNewFilePreview;
    addNewFilePreview = function(previewId, file, icon, inputId) {
        origAddNewFilePreview(previewId, file, icon, inputId);
        if (inputId === 'VideoFilesEdit') updateTotalResourceSize('video');
        if (inputId === 'ImageFilesEdit') updateTotalResourceSize('image');
        if (inputId === 'DocumentFilesEdit') updateTotalResourceSize('document');
    };

    // Patch delete button for new files to update size
    // (already handled in addNewFilePreview above)

    // Patch handleDeleteMedia for existing files to update size
    // (already handled in handleDeleteMedia above)

    // When opening modal, set data-filesize on each .media-item for existing files
    const origOpenEditTopic = openEditTopic;
    openEditTopic = function(topicId, trainingId, topicName, description, mediaCount, accountFirstName, accountLastName, updatedTime, media) {
        origOpenEditTopic(topicId, trainingId, topicName, description, mediaCount, accountFirstName, accountLastName, updatedTime, media);
        // Set data-filesize for each .media-item
        (media || []).forEach(m => {
            if (m.MediaType && m.MediaType.toLowerCase().includes('video')) {
                const div = document.querySelector(`#VideoPreview .media-item[data-media-id='${m.Id}']`);
                if (div) div.setAttribute('data-filesize', m.FileSize || 0);
            }
            if (m.MediaType && m.MediaType.toLowerCase().includes('image')) {
                const div = document.querySelector(`#ImagePreview .media-item[data-media-id='${m.Id}']`);
                if (div) div.setAttribute('data-filesize', m.FileSize || 0);
            }
            if (isDocumentFile(m.MediaType, m.Name)) {
                const div = document.querySelector(`#DocumentPreview .media-item[data-media-id='${m.Id}']`);
                if (div) div.setAttribute('data-filesize', m.FileSize || 0);
            }
        });
        updateTotalResourceSize('video');
        updateTotalResourceSize('image');
        updateTotalResourceSize('document');
    };

    // Also update on file input change
    ['VideoFilesEdit','ImageFilesEdit','DocumentFilesEdit'].forEach(id => {
        document.getElementById(id).addEventListener('change', function() {
            if (id === 'VideoFilesEdit') updateTotalResourceSize('video');
            if (id === 'ImageFilesEdit') updateTotalResourceSize('image');
            if (id === 'DocumentFilesEdit') updateTotalResourceSize('document');
        });
    });
</script>