@model ASI.Basecode.Services.ServiceModels.ReviewViewModel
<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />

<div id="addUserReview" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 backdrop-blur-sm">
    <div class="flex max-h-[90vh] w-full max-w-3xl flex-col rounded-xl bg-[#640A16] text-white shadow-2xl p-8 mx-4 my-8 justify-center items-center">
        <div class="flex">
            <a onclick="closeAddReview()" class="hover-pointer">
                <span class="material-symbols-outlined text-[50px]">arrow_circle_left</span>
            </a>
        </div>
        <div class="flex flex-col w-full max-w-xl mx-auto gap-10">
            <h1 class="text-3xl uppercase font-semibold">Rate Training</h1>
            <form asp-action="AddReview" asp-controller="Review" method="post" id="reviewForm">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-red-400 mb-2" })
                <input type="hidden" asp-for="TrainingId" />
                <input type="hidden" asp-for="ReviewScore" id="ReviewScore" />
                <input type="number" min="1" max="5" asp-for="ReviewScore" id="ReviewScoreVisible" class="sr-only" aria-label="Star rating (1 to 5)" readonly />
                <div class="flex items-center justify-between w-full">
                    <p class="text-lg mr-4">Tap to Rate:</p>
                    <div id="starRating" class="flex items-center space-x-1">
                        @for (int i = 1; i <= 5; i++)
                        {
                            <svg class="w-10 h-10 cursor-pointer text-white transition-colors duration-150" data-star="@i" fill="currentColor" viewBox="0 0 22 20">
                                <path d="M11 0l2.755 5.584 6.177.898-4.466 4.353 1.054 6.151L11 14.771 5.48 17.014l1.053-6.151L2.066 6.51l6.179-.926L11 0z" />
                            </svg>
                        }
                    </div>
                    @Html.ValidationMessageFor(model => model.ReviewScore, "", new { @class = "text-red-400" })
                </div>
                <div class="flex flex-col gap-5">
                    <div>
                        <p class="text-lg">Title</p>
                        <input asp-for="Title" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#EAC231] text-black" />
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-red-400" })
                    </div>
                    <div>
                        <p class="text-lg">Review</p>
                        <textarea asp-for="UserReview" rows="8"
                                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#EAC231] text-black"></textarea>
                        @Html.ValidationMessageFor(model => model.UserReview, "", new { @class = "text-red-400" })
                    </div>
                </div>
                <button type="submit" class="bg-[#FFE9C6] w-2/3 text-black align-self-center py-2 rounded-xl font-weight-bold mt-2">
                    Submit
                </button>
            </form>
        </div>
    </div>
</div>

<script>
    const stars = document.querySelectorAll('#starRating svg');
    let selectedRating = 0;
    const reviewScoreInput = document.getElementById('ReviewScore');
    const reviewScoreVisible = document.getElementById('ReviewScoreVisible');

    stars.forEach((star, index) => {
        star.addEventListener('click', () => {
            selectedRating = index + 1;
            reviewScoreInput.value = selectedRating;
            reviewScoreVisible.value = selectedRating;
            updateStars();
        });
        star.addEventListener('mouseenter', () => {
            highlightStars(index + 1);
        });
        star.addEventListener('mouseleave', () => {
            highlightStars(selectedRating);
        });
    });

    function updateStars() {
        stars.forEach((star, i) => {
            if (i < selectedRating) {
                star.classList.remove('text-white');
                star.classList.add('text-yellow-300');
            } else {
                star.classList.remove('text-yellow-300');
                star.classList.add('text-white');
            }
        });
    }

    function highlightStars(hovered) {
        stars.forEach((star, i) => {
            if (i < hovered) {
                star.classList.remove('text-white');
                star.classList.add('text-yellow-300');
            } else {
                star.classList.remove('text-yellow-300');
                star.classList.add('text-white');
            }
        });
    }
</script>


