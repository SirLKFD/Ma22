@model List<ASI.Basecode.Services.ServiceModels.TopicViewModel>
@using System.Text.Json
@using ASI.Basecode.Services.ServiceModels

@{
    ViewData["Title"] = "Ma22 | Training Topic";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var training = ViewData["training"] as TrainingViewModel;
    var limitedModel = Model.Take(6).ToList();
    var firstColumn = limitedModel.Take(3).ToList();
    var secondColumn = limitedModel.Skip(3).ToList();
    double avgRating = (training.Reviews != null && training.Reviews.Any())
        ? training.Reviews.Average(r => r.ReviewScore)
        : 0;
    int fullStars = (int)Math.Floor(avgRating);
    bool hasHalfStar = (avgRating - fullStars) >= 0.5;
    int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
}
@section NoPadding {}

<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />

@* <!-- Cover Section with Foggy Bottom -->
<div class="relative h-[250px] w-full overflow-hidden">
    @if (!string.IsNullOrEmpty(training?.CoverPicture))
    {
        <img src="@training.CoverPicture" alt="Cover Photo" class="h-full w-full object-cover [mask-image:linear-gradient(to_bottom,black_70%,transparent_100%)]" />
    }
    else
    {
        <div class="flex h-full w-full items-center justify-center bg-gradient-to-br from-[#640A16] via-[#8B1538] to-[#640A16]">
            <div class="animate-[float_6s_ease-in-out_infinite] text-center text-white">
                <span class="material-symbols-outlined mb-2 text-6xl opacity-50">image</span>
                <p class="text-lg font-medium">No Cover Image Provided</p>
            </div>
        </div>
    }
</div>

<!-- Title Card -->
<div class="relative z-10 mx-auto -mt-12 w-[95%] max-w-4xl overflow-hidden rounded-xl border border-gray-200 bg-white shadow-2xl">
    <div class="h-[6px] w-full bg-gradient-to-r from-[#640A16] via-[#EAC231] to-[#640A16]"></div>
    <div class="flex flex-col items-center justify-center px-6 py-4">
        <h1 class="text-center text-3xl font-bold text-gray-800 md:text-4xl">@Html.Raw(Html.Encode(training?.TrainingName))</h1>
        <div class="mt-2 flex items-center space-x-2 text-xl text-yellow-500">
            <span>⭐</span><span>⭐</span><span>⭐</span><span>⭐</span><span>⭐</span>
            <div class="ml-2 text-left text-sm text-gray-600">
                <div class="text-base font-bold text-gray-800">5.0</div>
                <div class="text-xs">Positive Reviews</div>
            </div>
        </div>
    </div>
</div>

<!-- Main Body Section -->
<div class="mx-8 mb-8 mt-16 flex flex-col gap-8 lg:mx-20 lg:flex-row">
    <!-- Description Card -->
    <div class="sticky top-[120px] flex h-fit w-full flex-col justify-center gap-4 self-start rounded-2xl border border-gray-200 bg-gradient-to-br from-white to-gray-50 px-6 py-6 shadow-xl lg:w-1/3">
        <div class="mb-2 flex items-center gap-3">
            <span class="material-symbols-outlined text-2xl text-[#640A16]">description</span>
            <h2 class="text-2xl font-bold text-gray-800">Description</h2>
        </div>
        <div class="mb-2 flex gap-2">
            @if (!string.IsNullOrEmpty(training.SkillLevelName))
            {
                var skillColor = training.SkillLevelName == "Beginner" ? "bg-green-200 text-green-800"
                                : training.SkillLevelName == "Intermediate" ? "bg-yellow-200 text-yellow-800"
                                : "bg-red-200 text-red-800";
                <span class="rounded-full px-3 py-1 text-xs font-semibold @skillColor">
                    @training.SkillLevelName
                </span>
            }
            @if (!string.IsNullOrEmpty(training.TrainingCategoryName))
            {
                <span class="rounded-full bg-orange-200 px-3 py-1 text-xs font-semibold text-orange-800">
                    @training.TrainingCategoryName
                </span>
            }
        </div>
        <p class="mt-2 w-3/4">@training.Description</p>
    </div>

    <!-- Topics Card -->
    <div class="flex w-full flex-col justify-start gap-6 rounded-2xl border border-gray-100 bg-white px-6 py-6 shadow-xl lg:w-2/3">
        <div class="flex flex-col items-start justify-between gap-4 border-b border-gray-100 pb-4 sm:flex-row sm:items-center">
            <div class="flex items-center gap-3">
                <span class="material-symbols-outlined text-3xl text-[#640A16]">topic</span>
                <h2 class="text-3xl font-bold text-gray-800">Training Topics</h2>
                <span class="rounded-full bg-[#640A16] px-3 py-1 text-sm font-medium text-white">@(Model?.Count ?? 0)</span>
            </div>
            <button class="rounded-xl bg-gradient-to-br from-[#EAC231] via-[#F4D03F] to-[#EAC231] px-6 py-3 font-bold text-gray-800 shadow-lg transition-all duration-300 hover:translate-y-[-2px] hover:shadow-2xl" onclick="addTopic(@training?.Id)">Add Topic +</button>
        </div>

        @foreach (var topic in Model)
        {
            <div class="cursor-pointer rounded-xl bg-gradient-to-br from-[#640A16] via-[#7A0F20] to-[#640A16] px-6 py-4 text-sm text-white shadow-lg transition-all duration-300 hover:translate-y-[-8px] hover:shadow-2xl"
                 onclick="window.location.href='@Url.Action("TopicDetails", "AdminTopic", new { topicId = topic.Id })'">
                <div class="mb-2 flex items-center justify-between">
                    <h3 class="text-2xl font-semibold">@topic.TopicName</h3>
                    <div class="flex gap-2">
                        <span class="material-symbols-outlined cursor-pointer text-[20px]"
                              onclick='event.stopPropagation(); openEditTopic(@topic.Id, @topic.TrainingId, "@topic.TopicName", "@topic.Description", @topic.MediaCount, "@topic.AccountFirstName", "@topic.AccountLastName", "@topic.UpdatedTime", @Html.Raw(JsonSerializer.Serialize(topic.Media)))'>edit</span>
                        <span class="material-symbols-outlined cursor-pointer text-[20px]"
                              onclick='event.stopPropagation(); openDeleteTopic(@topic.Id, @topic.TrainingId, "@topic.TopicName", @topic.MediaCount, "@topic.AccountFirstName", "@topic.AccountLastName", "@topic.UpdatedTime")'>delete</span>
                    </div>
                </div>
                <p>Created by: @topic.AccountFirstName @topic.AccountLastName</p>
                <p>@topic.UpdatedTime.ToString("MMMM dd, yyyy")</p>
                <div class="mt-2 flex items-center gap-1">
                    <span class="material-symbols-outlined animate-[pulse_2s_infinite] text-[20px]">attachment</span>
                    <span>@topic.MediaCount Attachments</span>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modals -->
@await Html.PartialAsync("~/Views/Admin/AddTopic.cshtml", new TopicViewModel())
@await Html.PartialAsync("~/Views/Admin/EditTopic.cshtml", new TopicViewModel())
@await Html.PartialAsync("~/Views/Admin/DeleteTopic.cshtml", new TopicViewModel())

<script type="text/javascript">
    function closeAddTopic() {
        document.getElementById('addTopic').classList.add('hidden');
    }
    function closeEditTopic() {
        document.getElementById('editTopic').classList.add('hidden');
    }
    function closeDeleteTopic() {
        document.getElementById('deleteTopic').classList.add('hidden');
    }
</script> *@


<div class="flex h-[250px] w-screen items-center justify-center bg-blue-900">
    @if (!string.IsNullOrEmpty(training?.CoverPicture))
    {
        <img src="@training.CoverPicture" alt="Cover Photo" class="h-full w-full object-cover" />
    }
    else
    {
        <div class="flex h-full w-full items-center justify-center bg-gradient-to-br from-[#640A16] via-[#8B1538] to-[#640A16]">
            <div class="animate-[float_6s_ease-in-out_infinite] text-center text-white">
                <span class="material-symbols-outlined mb-2 text-6xl opacity-50">image</span>
                <p class="text-lg font-medium">No Cover Image Provided</p>
            </div>
        </div>
    }
</div>
<div class="mb-20 pb-20">

    <div class="-my-20 mx-20 flex max-w-[90vw] gap-10">
        <div class="flex flex-[2] flex-col gap-10">
            <div class="flex flex-col gap-5 rounded-lg bg-white p-4 shadow-md">
                <div class="max-w-fit rounded-full bg-[#EAC231] px-2 py-1 text-xs">Topic</div>
                <h1 class="font-weight-bold w-3/4 text-4xl">@training.TrainingName</h1>
                <div class="mb-2 flex gap-2">
                    @if (!string.IsNullOrEmpty(training.SkillLevelName))
                    {
                        var skillColor = training.SkillLevelName == "Beginner" ? "bg-green-200 text-green-800"
                                        : training.SkillLevelName == "Intermediate" ? "bg-yellow-200 text-yellow-800"
                                        : "bg-red-200 text-red-800";
                        <span class="rounded-full px-3 py-1 text-xs font-semibold @skillColor">
                            @training.SkillLevelName
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(training.TrainingCategoryName))
                    {
                        <span class="rounded-full bg-orange-200 px-3 py-1 text-xs font-semibold text-orange-800">
                            @training.TrainingCategoryName
                        </span>
                    }
                </div>
                <p class="mt-2 w-3/4">@training.Description</p>
                <div class="flex items-center gap-6 text-sm text-slate-500">
                    <div class="flex items-center gap-2">
                        <span class="material-symbols-outlined">group</span>
                        <span>@ViewData["EnrollmentCount"] students enrolled</span>
                    </div>
                    <div class="flex items-center gap-2">
                        <span class="material-symbols-outlined">import_contacts</span>
                        <span>@Model.Count topic@(Model.Count == 1 ? "" : "s")</span>
                    </div>
                    <div class="flex items-center gap-2">
                        <span class="material-symbols-outlined">schedule</span>
                        <span>@training.DurationName to study</span>
                    </div>
                </div>
            </div>
            <div class="flex w-full flex-col gap-2 rounded-lg bg-white p-4 shadow-md">
                <div class="flex items-center space-x-4">
                    <span class="material-symbols-outlined rounded-lg bg-[#EAC231] p-2">import_contacts</span>
                    <h2 class="font-weight-bold text-2xl">Course Topics</h2>
                </div>
                <p class="text-sm">Explore the comprehensive curriculum designed to build your programming skills step by step</p>
                <div class="grid w-full grid-cols-1 gap-5 md:grid-cols-2">
                    @foreach (var topic in Model)
                    {
                        <div class="hover-pointer flex w-full flex-col bg-white p-4 shadow-md transition-all duration-300 hover:scale-105" onclick="window.location.href='@Url.Action("TopicDetails", "AdminTopic", new { topicId = topic.Id })'">
                            <div class="flex justify-between">
                                <p class="text-xl font-semibold">@topic.TopicName</p>
                                <div>
                                    <span class="material-symbols-outlined cursor-pointer text-[20px] hover:text-blue-500"
                                          onclick='event.stopPropagation(); openEditTopic(@topic.Id, @topic.TrainingId, "@topic.TopicName", "@topic.Description", @topic.MediaCount, "@topic.AccountFirstName", "@topic.AccountLastName", "@topic.UpdatedTime", @Html.Raw(JsonSerializer.Serialize(topic.Media)))'>edit</span>
                                    <span class="material-symbols-outlined cursor-pointer text-[20px] hover:text-red-500"
                                          onclick='event.stopPropagation(); openDeleteTopic(@topic.Id, @topic.TrainingId, "@topic.TopicName", @topic.MediaCount, "@topic.AccountFirstName", "@topic.AccountLastName", "@topic.UpdatedTime")'>delete</span>
                                </div>
                            </div>
                            <p class="text-sm">@topic.Description</p>

                        </div>
                    }
                </div>
            </div>
            <div class="flex w-full flex-col gap-2 rounded-lg bg-white p-4 shadow-md">
                <div class="flex justify-between">
                    <div class="flex items-center space-x-4">
                        <span class="material-symbols-outlined rounded-lg bg-[#EAC231] p-2">star</span>
                        <h2 class="font-weight-bold text-2xl">Ratings and Reviews</h2>
                    </div>
                    <div class="flex items-center space-x-2">
                        <p class="text-2xl font-semibold">
                            @(avgRating > 0 ? avgRating.ToString("0.0") : "No ratings")
                        </p>
                        @for (int i = 0; i < fullStars; i++)
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 fill-[#EAC231]" viewBox="0 0 24 24">
                                <path d="M12 .587l3.668 7.431L24 9.753l-6 5.845 1.416 8.263L12 18.896l-7.416 4.965L6 15.598 0 9.753l8.332-1.735z" />
                            </svg>
                        }
                        @if (hasHalfStar)
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 24 24">
                                <defs>
                                    <linearGradient id="half">
                                        <stop offset="50%" stop-color="#EAC231" />
                                        <stop offset="50%" stop-color="white" />
                                    </linearGradient>
                                </defs>
                                <path fill="url(#half)" d="M12 .587l3.668 7.431L24 9.753l-6 5.845 1.416 8.263L12 18.896l-7.416 4.965L6 15.598 0 9.753l8.332-1.735z" />
                            </svg>
                        }
                        @for (int i = 0; i < emptyStars; i++)
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 fill-gray-300" viewBox="0 0 24 24">
                                <path d="M12 .587l3.668 7.431L24 9.753l-6 5.845 1.416 8.263L12 18.896l-7.416 4.965L6 15.598 0 9.753l8.332-1.735z" />
                            </svg>
                        }
                    </div>
                </div>
                <p>See what other students are saying about this course</p>
                <div class="flex flex-col gap-10">
                    @if (training.Reviews != null && training.Reviews.Any())
                    {
                        foreach (var review in training.Reviews)
                        {
                            <div class="hover-pointer flex w-full flex-col bg-white p-4 shadow-md transition-all duration-300 hover:scale-110">
                                <p class="text-xl font-semibold">@review.Title</p>
                                <p class="text-sm">@review.UserReview</p>
                                <div class="mt-2 flex items-center gap-2">
                                    <span class="material-symbols-outlined text-[#EAC231]">star</span>
                                    <span>@review.ReviewScore</span>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="flex w-full flex-col bg-white p-4 text-center text-gray-400 shadow-md">
                            <p class="text-lg font-semibold">No reviews yet for this course.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="flex flex-[1] flex-col gap-10">
            <div class="flex max-h-fit flex-col rounded-lg bg-white p-4 shadow-md">
                <div class="mb-4 flex flex-col items-center gap-2">
                    <h1 class="font-weight-bold text-2xl">Need new Topics?</h1>
                    <p class="mb-2">Add more topics for your users</p>
                    <button class="rounded-lg bg-[#EAC231] px-32 py-2 font-semibold" onclick="addTopic(@training?.Id)">Add Topic +</button>
                </div>
                <hr class="mb-2" />
                <div class="space-y-3">
                    <div class="flex justify-between">
                        <p>Skill Level</p>
                        <p class="max-w-fit rounded-full bg-[#C6FFCD] px-2 py-1 text-xs">@training.SkillLevelName</p>
                    </div>
                    <div class="flex justify-between">
                        <p>Category</p>
                        <p class="max-w-fit rounded-full bg-[#FFE9C6] px-2 py-1 text-xs">@training.TrainingCategoryName</p>
                    </div>
                </div>
            </div>
            <div class="flex max-h-fit flex-col items-center gap-4 rounded-lg bg-white p-4 shadow-md">
                <p class="text-xl font-semibold">Created By</p>
                <div class="flex">

                    @if (!string.IsNullOrEmpty(@training.AccountPicture))
                    {
                        <img src="@training.AccountPicture" alt="Profile" class="h-[50px] w-[50px] rounded-full object-cover" />
                    }
                    else
                    {
                        <span class="material-symbols-outlined !text-[50px]">person</span>
                    }
                </div>
                <span>@training.AccountFirstName @training.AccountLastName</span>

            </div>
        

        </div>
    </div>
</div>

<!-- Modals -->
@await Html.PartialAsync("~/Views/Admin/AddTopic.cshtml", new TopicViewModel())
@await Html.PartialAsync("~/Views/Admin/EditTopic.cshtml", new TopicViewModel())
@await Html.PartialAsync("~/Views/Admin/DeleteTopic.cshtml", new TopicViewModel())

<script type="text/javascript">
    function closeAddTopic() {
        document.getElementById('addTopic').classList.add('hidden');
    }
    function closeEditTopic() {
        document.getElementById('editTopic').classList.add('hidden');
    }
    function closeDeleteTopic() {
        document.getElementById('deleteTopic').classList.add('hidden');
    }
</script>