@model TopicViewModel
<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />


<div id="editTopic" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 backdrop-blur-sm hidden">
    <div class="flex w-full max-w-5xl max-h-[90vh] flex-col rounded-xl bg-white text-black shadow-lg p-6">

        <div class="flex">
            <a onclick="closeEditTopic()" class="hover-pointer">
                <span class="material-symbols-outlined text-[50px]">arrow_circle_left</span>
            </a>
        </div>
        <div class="flex align-items-center justify-start w-full my-3 mx-5">
            <h1 class="uppercase text-2xl font-weight-bold">Edit Topic</h1>
        </div>
        <form asp-controller="AdminTopic" asp-action="EditTopic" method="post" enctype="multipart/form-data">
            <input type="hidden" id="TopicIdEdit" name="Id" />
            <input type="hidden" id="TrainingIdEdit" name="TrainingId" />
            <input type="hidden" id="DeletedMediaIds" name="DeletedMediaIds"/>
            <div class="flex">
                <!-- Left side with form fields -->
                <div class="flex flex-col w-1/2">
                    <div class="mx-5 mt-2">
                        <label asp-for="TopicName" class="block text-sm font-medium text-black mb-2">Topic Name</label>
                        <input asp-for="TopicName" id="TopicNameEdit" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#EAC231] text-black" />
                        <span asp-validation-for="TopicName" class="text-danger"></span>
                    </div>

                    <div class="mx-5 mt-2">
                        <label asp-for="Description" class="block text-sm font-medium text-black mb-2">Description</label>
                        <textarea asp-for="Description" id="DescriptionEdit" rows="12" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#EAC231] text-black"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>

                    <button class="bg-[#FFE9C6] mx-5 mt-4 rounded-lg px-4 py-2 font-semibold">Save Changes</button>
                </div>

                <!-- Right side content -->
                    <div class="flex flex-col w-1/2 bg-[#640A16] rounded-lg p-4 text-white gap-2">
                        <h2 class="text-2xl font-semibold">Resources</h2>
                        
                        <div class="flex flex-1 gap-2 flex-col ">
                            <!-- Videos -->
                            <div class="flex-1 flex flex-col">
                                <div class="flex justify-between">
                                    <p class="text-lg">Videos</p>
                                    <label for="VideoFilesEdit"  class="cursor-pointer">
                                    <input type="file"
                                        name="VideoFilesEdit"
                                        id="VideoFilesEdit"
                                        accept="video/*"
                                        multiple
                                        class="hidden" />
                                    <div class="flex items-center text-white">
                                        <span class="material-symbols-outlined ">add_photo_alternate</span>
                                        <h1 class="uppercase font-semibold">Upload</h1>
                                    </div>
                                    </label>
                                </div>
                                <div class="flex flex-1 flex-col bg-white w-full rounded-xl p-2 items-center">
                                    <div id="VideoPreview" class="flex w-full h-full text-black gap-2 overflow-x-auto items-center"> 
                                    </div>
                                 </div>  
                            </div>

                            <!-- Images -->
                            <div class="flex-1 flex flex-col">
                                <div class="flex justify-between">
                                    <p class="text-lg">Images</p>
                                    <label for="ImageFilesEdit"  class="cursor-pointer">
                                    <input type="file"
                                        name="ImageFilesEdit"
                                        id="ImageFilesEdit"
                                        accept="image/*"
                                        multiple
                                        class="hidden" />
                                    <div class="flex items-center text-white">
                                        <span class="material-symbols-outlined ">add_photo_alternate</span>
                                        <h1 class="uppercase font-semibold">Upload</h1>
                                    </div>
                                    </label>
                                </div>
                                <div class="flex flex-1 flex-col bg-white w-full rounded-xl p-2 items-center">
                                    <div id="ImagePreview" class="flex w-full h-full text-black gap-2 overflow-x-auto items-center"> 
                                    </div>
                                 </div>  
                            </div>

                            <!-- Documents -->
                             <div class="flex-1 flex flex-col">
                                <div class="flex justify-between">
                                    <p class="text-lg">Documents</p>
                                    <label for="DocumentFilesEdit"  class="cursor-pointer">
                                    <input type="file"
                                        name="DocumentFilesEdit"
                                        id="DocumentFilesEdit"
                                        accept="application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                        multiple
                                        class="hidden" />
                                    <div class="flex items-center text-white">
                                        <span class="material-symbols-outlined ">add_photo_alternate</span>
                                        <h1 class="uppercase font-semibold">Upload</h1>
                                    </div>
                                    </label>
                                </div>
                                <div class="flex flex-1 flex-col bg-white w-full rounded-xl p-2 items-center">
                                    <div id="DocumentPreview" class="flex w-full h-full text-black gap-2 overflow-x-auto items-center"> 
                                    </div>
                                 </div>  
                            </div>
                        </div>
                </div>
            </div>

        </form>
    </div>
</div>


<script>
    function handleDeleteMedia(div, mediaId) {
        let deleted = document.getElementById('DeletedMediaIds').value;
        let arr = deleted ? deleted.split(',') : [];
        if (!arr.includes(mediaId.toString())) arr.push(mediaId);
        document.getElementById('DeletedMediaIds').value = arr.join(',');
        div.remove();
    }

    function openEditTopic(topicId, trainingId, topicName, description, mediaCount, accountFirstName, accountLastName, updatedTime, media) {
        console.log('Opening edit modal with:', { topicId, trainingId, topicName, description, mediaCount, accountFirstName, accountLastName, updatedTime, media });
        
        // Set the values in the form
        document.getElementById('TopicNameEdit').value = topicName;
        document.getElementById('DescriptionEdit').value = description;
        document.getElementById('TrainingIdEdit').value = trainingId;
        document.getElementById('TopicIdEdit').value = topicId;

        // Debug: log the media array
        console.log('Raw media array:', media);
        if (media && media.length > 0) {
            console.log('First media object:', media[0]);
        }

        // Separate by type
        const images = media.filter(m => m.MediaType && m.MediaType.toLowerCase().includes('image'));
        const videos = media.filter(m => m.MediaType && m.MediaType.toLowerCase().includes('video'));
        const documents = media.filter(m => m.MediaType && (m.MediaType.toLowerCase().includes('pdf') || m.MediaType.toLowerCase().includes('word')));

        // Debug: log separated arrays
        console.log('Images:', images);
        console.log('Videos:', videos);
        console.log('Documents:', documents);

        document.getElementById('editTopic').classList.remove('hidden');

        document.getElementById('VideoFilesEdit').value = '';
        document.getElementById('ImageFilesEdit').value = '';
        document.getElementById('DocumentFilesEdit').value = '';

        // Video preview
        const videoPreview = document.getElementById('VideoPreview');
        videoPreview.innerHTML = '';
        if (videos.length) {
            videoPreview.classList.remove('hidden');
            videos.forEach(m => {
                const div = document.createElement('div');
                div.className = 'flex flex-col items-center min-w-[60px] cursor-pointer media-item';
                div.setAttribute('data-media-id', m.Id);
                div.innerHTML = `<span class=\"material-symbols-outlined text-black\" style=\"font-size:30px\">movie</span>\n<span class='truncate w-[60px] text-xs text-black text-center'>${m.Name ? m.Name.substring(0, 10) : ''}</span>\n<button type='button' class='delete-media-btn' data-media-id='${m.Id}' style='color:red;'><span class=\"material-symbols-outlined \" style='font-size: 20px'>delete</span></button>`;
                div.onclick = function(e) {
                    if (e.target.closest('.delete-media-btn')) {
                        handleDeleteMedia(div, m.Id);
                        e.stopPropagation();
                    } else {
                        window.open(m.MediaUrl, '_blank');
                    }
                };
                videoPreview.appendChild(div);
            });
        } else {
            videoPreview.classList.add('hidden');
        }
       
        
        // Image preview
        const imagePreview = document.getElementById('ImagePreview');
        if (imagePreview) {
            imagePreview.innerHTML = '';
            if (images.length) {
                imagePreview.classList.remove('hidden');
                images.forEach(m => {
                    const div = document.createElement('div');
                    div.className = 'flex flex-col items-center min-w-[60px] cursor-pointer media-item';
                    div.setAttribute('data-media-id', m.Id);
                    div.innerHTML = `<span class=\"material-symbols-outlined text-black\" style=\"font-size:30px\">image</span>\n<span class='truncate w-[60px] text-xs text-black text-center'>${m.Name ? m.Name.substring(0, 10) : ''}</span>\n<button type='button' class='delete-media-btn' data-media-id='${m.Id}' style='color:red;'><span class=\"material-symbols-outlined \" style='font-size: 20px'>delete</span></button>`;
                    div.onclick = function(e) {
                        if (e.target.closest('.delete-media-btn')) {
                            handleDeleteMedia(div, m.Id);
                            e.stopPropagation();
                        } else {
                            window.open(m.MediaUrl, '_blank');
                        }
                    };
                    imagePreview.appendChild(div);
                });
            } else {
                imagePreview.classList.add('hidden');
            }
           
        }

        // Document preview
        const documentPreview = document.getElementById('DocumentPreview');
        if (documentPreview) {
            documentPreview.innerHTML = '';
            if (documents.length) {
                documentPreview.classList.remove('hidden');
                documents.forEach(m => {
                    const div = document.createElement('div');
                    div.className = 'flex flex-col items-center min-w-[60px] cursor-pointer media-item';
                    div.setAttribute('data-media-id', m.Id);
                    div.innerHTML = `<span class=\"material-symbols-outlined text-black\" style=\"font-size:30px\">description</span>\n<span class='truncate w-[60px] text-xs text-black text-center'>${m.Name ? m.Name.substring(0, 10) : ''}</span>\n<button type='button' class='delete-media-btn' data-media-id='${m.Id}' style='color:red;'><span class=\"material-symbols-outlined \" style='font-size: 20px'>delete</span></button>`;
                    div.onclick = function(e) {
                        if (e.target.closest('.delete-media-btn')) {
                            handleDeleteMedia(div, m.Id);
                            e.stopPropagation();
                        } else {
                            window.open(m.MediaUrl, '_blank');
                        }
                    };
                    documentPreview.appendChild(div);
                });
            } else {
                documentPreview.classList.add('hidden');
            }
        
        }
    }
      
    // Listen for file input changes and log selected files
    ['VideoFilesEdit', 'ImageFilesEdit', 'DocumentFilesEdit'].forEach(function(inputId) {
        var input = document.getElementById(inputId);
        if (input) {
            input.addEventListener('change', function(event) {
                if (event.target.files && event.target.files.length > 0) {
                    const fileNames = Array.from(event.target.files).map(f => f.name);
                    console.log(`[UPLOAD] ${inputId}: Selected files:`, fileNames);
        } else {
                    console.log(`[UPLOAD] ${inputId}: No files selected.`);
                }
            });
        }
    });

    function addNewFilePreview(previewId, file, icon, inputId) {
        const preview = document.getElementById(previewId);
        const div = document.createElement('div');
        div.className = 'flex flex-col items-center min-w-[60px] cursor-pointer media-item new';
        div.innerHTML = `<span class="material-symbols-outlined text-black" style="font-size:30px">${icon}</span>\n<span class='truncate w-[60px] text-xs text-black text-center'>${file.name.substring(0, 10)}</span>\n<button type='button' class='delete-media-btn' style='color:red;'><span class="material-symbols-outlined" style='font-size: 20px'>delete</span></button>`;
        div.querySelector('.delete-media-btn').onclick = function(e) {
            div.remove();
            e.stopPropagation();
        };
        preview.appendChild(div);
    }

    document.getElementById('ImageFilesEdit').addEventListener('change', function(event) {
        const preview = document.getElementById('ImagePreview');
        Array.from(event.target.files).forEach(file => {
            addNewFilePreview('ImagePreview', file, 'image', 'ImageFilesEdit');
        });
    });

    document.getElementById('VideoFilesEdit').addEventListener('change', function(event) {
        const preview = document.getElementById('VideoPreview');
        Array.from(event.target.files).forEach(file => {
            addNewFilePreview('VideoPreview', file, 'movie', 'VideoFilesEdit');
        });
    });

    document.getElementById('DocumentFilesEdit').addEventListener('change', function(event) {
        const preview = document.getElementById('DocumentPreview');
        Array.from(event.target.files).forEach(file => {
            addNewFilePreview('DocumentPreview', file, 'description', 'DocumentFilesEdit');
        });
    });
</script>