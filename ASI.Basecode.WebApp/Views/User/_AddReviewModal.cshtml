@model ASI.Basecode.Services.ServiceModels.ReviewViewModel
<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />

<div id="addUserReview" class="hidden fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 backdrop-blur-sm">
    <div class="flex flex-col w-full max-w-2xl rounded-xl bg-[#7B1623] text-white shadow-2xl p-10 mx-4 my-8 justify-center items-center">
        <div class="w-full flex justify-start mb-4">
            <a onclick="closeAddReview()" class="hover-pointer">
                <span class="material-symbols-outlined text-[36px]">arrow_circle_left</span>
            </a>
        </div>
        <div class="flex flex-col w-full gap-2">
            <h1 id="reviewModalTitle" class="text-3xl uppercase font-semibold mb-2">Rate Training</h1>
            <div class="flex items-center justify-between w-full mb-0">
                <p class="text-lg">Tap to Rate:</p>
                <div id="starRating" class="flex items-center space-x-2">
                    @for (int i = 1; i <= 5; i++)
                    {
                        <svg class="w-10 h-10 cursor-pointer text-yellow-400 transition-colors duration-150" data-star="@i" fill="currentColor" viewBox="0 0 22 20">
                            <path d="M11 0l2.755 5.584 6.177.898-4.466 4.353 1.054 6.151L11 14.771 5.48 17.014l1.053-6.151L2.066 6.51l6.179-.926L11 0z" />
                        </svg>
                    }
                </div>
            </div>
            @Html.ValidationMessageFor(model => model.ReviewScore, "", new { @class = "text-red-400 mb-1" })
            <form id="reviewForm" class="flex flex-col gap-3">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-red-400 mb-2" })
                <input type="hidden" asp-for="TrainingId" />
                <input type="hidden" asp-for="ReviewId" id="ReviewId" />
                <input type="hidden" asp-for="ReviewScore" id="ReviewScore" />
                <input type="number" min="1" max="5" asp-for="ReviewScore" id="ReviewScoreVisible" class="sr-only" aria-label="Star rating (1 to 5)" readonly />
                <div>
                    <p class="text-lg mb-1">Title</p>
                    <input asp-for="Title" id="ReviewTitle" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#EAC231] text-black" required />
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-red-400" })
                </div>
                <div>
                    <p class="text-lg mb-1">Review</p>
                    <textarea asp-for="UserReview" id="ReviewText" rows="6" maxlength="150" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#EAC231] text-black" required></textarea>
                    <div class="flex items-center justify-between mt-1">
                        <span id="reviewCharCount" class="text-xs text-[#EAC231]">0/150</span>
                        <span id="reviewCharWarning" class="text-xs text-[#EAC231] hidden">Maximum 150 characters allowed.</span>
                    </div>
                    @Html.ValidationMessageFor(model => model.UserReview, "", new { @class = "text-red-400" })
                </div>
                <button type="submit" id="reviewSubmitBtn" class="bg-[#FFE9C6] w-1/3 mx-auto text-black py-2 rounded-xl font-semibold mt-2 shadow hover:bg-[#EAC231] transition">Submit</button>
            </form>
        </div>
    </div>
</div>

<script>
    const stars = document.querySelectorAll('#starRating svg');
    let selectedRating = 0;
    const reviewScoreInput = document.getElementById('ReviewScore');
    const reviewScoreVisible = document.getElementById('ReviewScoreVisible');
    let isEditMode = false;

    stars.forEach((star, index) => {
        star.addEventListener('click', () => {
            selectedRating = index + 1;
            reviewScoreInput.value = selectedRating;
            reviewScoreVisible.value = selectedRating;
            updateStars();
        });
        star.addEventListener('mouseenter', () => {
            highlightStars(index + 1);
        });
        star.addEventListener('mouseleave', () => {
            highlightStars(selectedRating);
        });
    });

    function updateStars() {
        stars.forEach((star, i) => {
            if (i < selectedRating) {
                star.classList.remove('text-white');
                star.classList.add('text-yellow-300');
            } else {
                star.classList.remove('text-yellow-300');
                star.classList.add('text-white');
            }
        });
    }

    function highlightStars(hovered) {
        stars.forEach((star, i) => {
            if (i < hovered) {
                star.classList.remove('text-white');
                star.classList.add('text-yellow-300');
            } else {
                star.classList.remove('text-yellow-300');
                star.classList.add('text-white');
            }
        });
    }

    // Character counter and warning for review textarea
    const reviewText = document.getElementById('ReviewText');
    const charCount = document.getElementById('reviewCharCount');
    const charWarning = document.getElementById('reviewCharWarning');
    reviewText.addEventListener('input', function() {
        const len = reviewText.value.length;
        charCount.textContent = `${len}/150`;
        if (len >= 150) {
            charWarning.classList.remove('hidden');
            reviewText.value = reviewText.value.substring(0, 150);
        } else {
            charWarning.classList.add('hidden');
        }
    });

    // Handle form submission
    document.getElementById('reviewForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Validate required fields
        const title = document.getElementById('ReviewTitle').value.trim();
        const reviewText = document.getElementById('ReviewText').value.trim();
        const rating = selectedRating;
        
        if (!title) {
            alert('Please enter a title for your review.');
            document.getElementById('ReviewTitle').focus();
            return;
        }
        
        if (!reviewText) {
            alert('Please enter your review text.');
            document.getElementById('ReviewText').focus();
            return;
        }
        
        if (rating === 0) {
            alert('Please select a rating by clicking on the stars.');
            return;
        }
        
        // Show loading state
        const submitBtn = document.getElementById('reviewSubmitBtn');
        const originalText = submitBtn.textContent;
        submitBtn.textContent = 'Submitting...';
        submitBtn.disabled = true;
        
        const formData = new FormData(this);
        
        // Remove ReviewId from form data when adding a new review
        if (!isEditMode) {
            formData.delete('ReviewId');
        }
        
        const action = isEditMode ? '/Review/EditReview' : '/Review/AddReview';
        
        fetch(action, {
            method: 'POST',
            body: formData
        }).then(response => {
            if (response.ok) {
                // Close modal
                closeAddReview();
                // Reload page to show updated reviews
                window.location.reload();
            } else {
                console.error('Form submission failed with status:', response.status);
                alert('Failed to submit review. Please try again.');
            }
        }).catch(error => {
            console.error('Error:', error);
            alert('An error occurred while submitting your review. Please try again.');
        }).finally(() => {
            // Reset button state
            submitBtn.textContent = originalText;
            submitBtn.disabled = false;
        });
    });

    // Function to load existing review data
    async function loadExistingReview(trainingId) {
        try {
            const response = await fetch(`/Review/GetUserReview?trainingId=${trainingId}`);
            const data = await response.json();
            
            if (data.success) {
                const review = data.review;
                document.getElementById('ReviewId').value = review.reviewId;
                document.getElementById('ReviewTitle').value = review.title;
                document.getElementById('ReviewText').value = review.userReview;
                document.getElementById('ReviewScore').value = review.reviewScore;
                document.getElementById('ReviewScoreVisible').value = review.reviewScore;
                
                selectedRating = review.reviewScore;
                updateStars();
                
                // Update UI for edit mode
                document.getElementById('reviewModalTitle').textContent = 'Edit Review';
                document.getElementById('reviewSubmitBtn').textContent = 'Update Review';
                isEditMode = true;
            }
        } catch (error) {
            console.error('Error loading review:', error);
        }
    }

    // Function to reset modal for new review
    function resetModalForNewReview() {
        // Don't set ReviewId for new reviews - let it be empty
        document.getElementById('ReviewTitle').value = '';
        document.getElementById('ReviewText').value = '';
        document.getElementById('ReviewScore').value = '';
        document.getElementById('ReviewScoreVisible').value = '';
        
        selectedRating = 0;
        updateStars();
        
        // Update UI for new review mode
        document.getElementById('reviewModalTitle').textContent = 'Rate Training';
        document.getElementById('reviewSubmitBtn').textContent = 'Submit';
        isEditMode = false;
    }
</script>


