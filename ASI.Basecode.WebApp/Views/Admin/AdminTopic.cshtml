@model TopicViewModel

@{
    ViewData["Title"] = "Admin Topic Details";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var topics = ViewData["topics"] as List<TopicViewModel>;
}

<div class="flex w-full space-x-8 min-w-0">
    <div class="flex flex-col w-2/3 gap-8 min-w-0">

        <div class="flex flex-col bg-white w-full rounded-xl shadow-md p-4 gap-4">
            <h1 class="text-5xl uppercase font-semibold mb-2">@Model.TopicName</h1>
            <p>@Model.Description</p>
            <div class="flex items-center justify-start gap-6 text-sm text-slate-500">
                <div class="flex items-center gap-2">
                    <span class="material-symbols-outlined">group</span>
                    <span>
                        Created by <strong class="text-slate-700">@Model.AccountFirstName @Model.AccountLastName</strong>
                    </span>
                </div>
              
                <div class="flex items-center gap-2">
                    <span class="material-symbols-outlined">schedule</span>
                    <span>Last updated: @Model.UpdatedTime</span>
                </div>
            </div>
        </div>
        <div class="flex flex-col bg-white w-full rounded-lg shadow-sm p-4">
            <div class="flex space-x-2">
                <span class="material-symbols-outlined !text-[25px] bg-red-100 p-2 rounded-xl">movie</span>
                <div class="flex flex-col">
                    <h2 class="text-xl font-semibold">Video Lessons</h2>
                    <p class="text-sm">
                        @(Model.Media != null ? Model.Media.Count(m => m.MediaType != null && m.MediaType.ToLower().Contains("video")) : 0) video resources
                    </p>
                </div>
            </div>
            
            <div class="flex overflow-x-auto whitespace-nowrap mt-2 w-full max-w-full min-w-0">

                @if (Model.Media != null && Model.Media.Any(m => m.MediaType != null && m.MediaType.ToLower().Contains("video")))
                {
                    foreach (var media in Model.Media.Where(m => m.MediaType != null && m.MediaType.ToLower().Contains("video")))
                    {
                        <div class="flex flex-col flex-shrink-0 w-[300px] h-[220px] outline outline-2 outline-black m-2 ">
                            <div class="flex w-full h-[120px] items-center justify-center ">
                                <a href="@media.MediaUrl" target="_blank">
                                    <span class="material-symbols-outlined">play_arrow</span>
                                </a>
                            </div>
                            <div class="bg-[#640A16] h-[100px] text-white p-2 space-y-2">
                                <p class="font-semibold">@(media.Name != null && media.Name.Length > 15 ? media.Name.Substring(0, 15) + "..." : media.Name)</p>
                                
                                <p class="text-xs">Video Resource</p>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="flex items-center text-gray-400 ml-4">No video resources.</div>
                }
            </div>
        </div>
        <div class="flex flex-col bg-white w-full overflow-x-auto whitespace-nowrap rounded-lg shadow-sm p-4">
            <div class="flex space-x-2">
                <span class="material-symbols-outlined !text-[25px] bg-green-100 p-2 rounded-xl">docs</span>
                <div class="flex flex-col">
                    <h2 class="text-xl font-semibold">Documents</h2>
                    <p class="text-sm">@Model.Media.Count(m => m.MediaType != null && (m.MediaType.ToLower().Contains("pdf") || m.MediaType.ToLower().Contains("word"))) downloadable resources</p>
                </div>
            </div>
            <div class="flex flex-col w-full">
                @if (Model.Media != null && Model.Media.Any(m => m.MediaType != null && (m.MediaType.ToLower().Contains("pdf") || m.MediaType.ToLower().Contains("word"))))
                {
                    foreach (var media in Model.Media.Where(m => m.MediaType != null && (m.MediaType.ToLower().Contains("pdf") || m.MediaType.ToLower().Contains("word"))))
                    {
                        <div class="flex items-center justify-between w-full h-[100px] bg-white rounded-xl shadow-sm p-4 border border-gray-200 m-2 ">
                            <div class="flex space-x-2">
                                <span class="material-symbols-outlined !text-[25px] bg-red-100 p-2 rounded-xl">docs</span>
                                <div class="flex flex-col">
                                    <h2 class="text-lg font-semibold">@(media.Name != null && media.Name.Length > 15 ? media.Name.Substring(0, 15) + "..." : media.Name)</h2>
                                    <p class="text-xs">Document Resource</p>
                                </div>
                            </div>
                            <div class="flex items-center space-x-2 hover:cursor-pointer hover:bg-[#EAC231] p-2 rounded-lg">
                                <span class="material-symbols-outlined">download</span>
                                <a href="@media.MediaUrl" target="_blank">Download</a>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="flex items-center text-gray-400 ml-4">No document resources.</div>
                }
            </div>
        </div>
        <div class="flex flex-col bg-white w-full rounded-lg shadow-sm p-4">
            <div class="flex space-x-2">
                <span class="material-symbols-outlined !text-[25px] bg-purple-100 p-2 rounded-xl">image</span>
                <div class="flex flex-col">
                    <h2 class="text-xl font-semibold">Visual Examples</h2>
                    <p class="text-sm">@Model.Media.Count(m => m.MediaType != null && m.MediaType.ToLower().Contains("image")) references</p>
                </div>
            </div>
            <div class="flex overflow-x-auto whitespace-nowrap mt-2 w-full max-w-full min-w-0">

                @if (Model.Media != null && Model.Media.Any(m => m.MediaType != null && m.MediaType.ToLower().Contains("image")))
                {
                    foreach (var media in Model.Media.Where(m => m.MediaType != null && m.MediaType.ToLower().Contains("image")))
                    {
                        <div class="flex flex-col flex-shrink-0 w-[300px] h-[220px] outline outline-2 outline-black m-2 ">
                            <div class="flex w-full h-[120px] items-center justify-center ">
                                <a href="@media.MediaUrl" target="_blank">
                                    <span class="material-symbols-outlined">image</span>
                                </a>
                            </div>
                            <div class="bg-[#640A16] h-[100px] text-white p-2 space-y-2">
                                <p class="font-semibold">@(media.Name != null && media.Name.Length > 15 ? media.Name.Substring(0, 15) + "..." : media.Name)</p>
                                <p class="text-xs">Image Resource</p>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="flex items-center text-gray-400 ml-4">No image resources.</div>
                }
            </div>
        </div>
    </div>
    <div class="w-1/3">

        <div class="bg-[#640A16] text-white max-h-fit flex flex-col rounded-xl shadow-md p-4">
            <div class="flex items-center space-x-2 justify-center">
                <span class="material-symbols-outlined !text-[40px]">import_contacts</span>
                <h2 class="text-3xl font-semibold">Other Topics</h2>
            </div>
            <!--Container for all topic cards-->
            <div class="flex flex-col gap-4">
                @if (topics != null && topics.Any())
                {
                    foreach (var t in topics.Where(t => t.Id != Model.Id))
                    {
                        <div class="flex flex-col rounded-xl bg-white text-black shadow-sm p-4 border border-gray-200 mt-4">
                            <div class="flex justify-between">
                                <h3 class="text-md font-semibold">@t.TopicName</h3>
                                <a href="@Url.Action("TopicDetails", "AdminTopic", new { topicId = t.Id })" title="Open Topic">
                                    <span class="material-symbols-outlined hover-pointer">open_in_new</span>
                                </a>
                            </div>
                            <p class="text-xs">@t.Description</p>
                            <div class="flex items-center mt-4 space-x-4">
                                <span class="text-xs bg-[#EAC231] p-2 rounded-full font-semibold">@t.MediaCount Attachments</span>
                             
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="flex items-center text-gray-200 ml-4">No other topics available.</div>
                }
            </div>
        </div>

        <!--Ratings Portion-->
        <div class="flex flex-col align-items-center justify-center mt-10 gap-4">
            <span class="material-symbols-outlined bg-[#EAC231] !text-[50px] text-white rounded-full p-3">star</span>
            <p class="font-weight-bold">What Users think of this Training</p>
            <button class="bg-[#EAC231] hover:bg-[#640A16] hover:text-white p-2 text-black rounded-xl font-semibold">View User Reviews</button>
        </div>
    </div>
</div>









@* <h2>Topic Details</h2>
@if (topic != null)
{
    <div class="card mb-4">
        <div class="card-body">
            <h4>@topic.TopicName</h4>
            <p><b>Description:</b> @topic.Description</p>
            <p><b>Created By:</b> @ViewBag.Account.FirstName @ViewBag.Account.LastName</p>
            <p><b>Created Time:</b> @topic.CreatedTime</p>
        </div>
    </div>
    <h4>Media</h4>
    <ul>
    @if (mediaList != null && mediaList.Count > 0)
    {
        foreach (var media in mediaList)
        {
            <li>
                <a href="@media.MediaUrl" target="_blank">@media.Name</a>
            </li>
        }
    }
    else
    {
        <li>No media uploaded for this topic.</li>
    }
    </ul>
}
else
{
    <div class="alert alert-warning">Topic not found.</div>
}  *@