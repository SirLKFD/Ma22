@model List<ASI.Basecode.Services.ServiceModels.TrainingViewModel>
@using static ASI.Basecode.Resources.Constants.Enums

@{
    var pageTitle = ViewBag.CategoryName ?? "Ma22 | Trainings";
    ViewData["Title"] = pageTitle;
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

    var isCategory = ViewBag.CategoryId != null;
    var categoryId = ViewBag.CategoryId;
    var search = ViewBag.Search ?? "";
    var skillLevelId = ViewBag.SelectedSkillLevelId;
    var selectedCategoryId = ViewBag.SelectedCategoryId;
    var trainingCategories = ViewData["categories"] as List<ASI.Basecode.Services.ServiceModels.TrainingCategoryViewModel>;

    var skillLevels = new Dictionary<int, string> {
        { 1, "Beginner" }, { 2, "Intermediate" }, { 3, "Advanced" }
    };
}
<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />

<div class="mx-auto mb-16 mt-10 flex w-[95%] max-w-7xl flex-col gap-10">

    <!-- Page Header -->
    <div class="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <h1 class="text-4xl font-bold uppercase text-[#222]">@pageTitle</h1>

        <div class="flex flex-col gap-4 sm:flex-row">
            @if (isCategory)
            {
                <form method="get" action="@Url.Action("TrainingCategoryDetails", new { categoryId = categoryId })" class="relative w-full sm:w-[400px]">
                    <input type="hidden" name="categoryId" value="@categoryId" />
                    <span class="material-symbols-outlined -translate-y-1/2 absolute left-3 top-1/2 text-gray-400">search</span>
                    <input type="search" name="search" value="@search"
                           placeholder="Search Trainings..."
                           class="h-12 w-full rounded-full border border-gray-300 bg-white pl-10 pr-[140px] text-sm text-gray-800 shadow-sm focus:outline-none focus:ring-2 focus:ring-[#EAC231]" />
                    <button type="submit"
                            class="absolute right-2 top-[6px] rounded-full bg-[#EAC231] px-4 py-2 text-sm font-medium text-black transition hover:bg-[#cfa221]">
                        Search
                    </button>
                </form>
            }
            else
            {
                <form method="get" asp-action="AdminTraining" class="relative w-full" autocomplete="off">
                    <div id="search-wrapper" class="relative transition-all duration-300">
                        <span class="material-symbols-outlined -translate-y-1/2 absolute left-3 top-1/2 text-gray-400">search</span>
                        <input type="search" name="search" value="@search" id="search-input"
                               placeholder="Search Trainings..."
                               class="h-12 w-full rounded-full border border-gray-300 bg-white pl-10 pr-[140px] text-sm text-gray-800 shadow-sm focus:outline-none focus:ring-2 focus:ring-[#EAC231]" />

                        <button type="submit"
                                class="absolute right-2 top-[6px] rounded-full bg-[#EAC231] px-4 py-2 text-sm font-medium text-black transition hover:bg-[#cfa221]">
                            Search
                        </button>

                        <!-- Collapsible Filter Pills -->
                        <div id="filter-pills-inside" class="hidden absolute left-0 right-0 mt-2 rounded-xl border border-gray-300 bg-white p-4 shadow-lg z-10">
                            @if (trainingCategories != null)
                            {
                                <div class="mb-2 text-xs font-semibold text-gray-500">Categories</div>
                                <div class="mb-4 flex flex-wrap gap-2">
                                    @foreach (var category in trainingCategories)
                                    {
                                        <a href="@Url.Action("AdminTraining", new { search = search, categoryId = category.Id, skillLevelId = skillLevelId })"
                                           class="rounded-full border border-gray-400 px-3 py-1 text-xs text-gray-700 hover:bg-gray-100 @(selectedCategoryId == category.Id ? "bg-blue-200 text-blue-800" : "")">
                                            @category.CategoryName
                                        </a>
                                    }
                                </div>
                            }

                            <div class="mb-2 text-xs font-semibold text-gray-500">Skill Levels</div>
                            <div class="flex flex-wrap gap-2">
                                @foreach (var level in skillLevels)
                                {
                                    <a href="@Url.Action("AdminTraining", new { search = search, categoryId = selectedCategoryId, skillLevelId = level.Key })"
                                       class="rounded-full border border-gray-400 px-3 py-1 text-xs text-gray-700 hover:bg-gray-100 @(skillLevelId == level.Key ? "bg-blue-200 text-blue-800" : "")">
                                        @level.Value
                                    </a>
                                }
                            </div>
                        </div>
                    </div>
                </form>

            }
            <button class="rounded-full bg-[#EAC231] px-6 py-2 text-sm font-semibold text-black shadow-md transition hover:bg-[#cfa221]"
                    onclick="addTraining()">
                Add+
            </button>
        </div>
    </div>

    <!-- Active Filters -->
    @if (selectedCategoryId != null || skillLevelId != null)
    {
        <div class="flex flex-wrap gap-2">
            @if (selectedCategoryId != null && trainingCategories != null)
            {
                var selectedCat = trainingCategories.FirstOrDefault(c => c.Id == selectedCategoryId);
                if (selectedCat != null)
                {
                    <span class="flex items-center gap-2 rounded-full bg-green-200 px-3 py-1 text-xs font-semibold text-green-800">
                        Category: @selectedCat.CategoryName
                        <a href="@Url.Action("AdminTraining", new { search = search, skillLevelId = skillLevelId })" class="hover:text-green-900">&times;</a>
                    </span>
                }
            }
            @if (skillLevelId != null)
            {
                <span class="flex items-center gap-2 rounded-full bg-green-200 px-3 py-1 text-xs font-semibold text-green-800">
                    Skill Level: @skillLevels[skillLevelId]
                    <a href="@Url.Action("AdminTraining", new { search = search, categoryId = selectedCategoryId })" class="hover:text-green-900">&times;</a>
                </span>
            }
        </div>
    }

    <!-- Grid of Training Cards -->
    <div class="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3">
        @if (Model != null && Model.Any())
        {
            foreach (var training in Model)
            {
                <div class="flex min-h-[400px] flex-col overflow-hidden rounded-2xl border border-gray-200 bg-white shadow-md transition hover:shadow-xl animate-slide-up opacity-0 animate-fade-in">
                    <div class="h-[180px]">
                        @if (!string.IsNullOrEmpty(training.CoverPicture))
                        {
                            <img class="h-full w-full object-cover" src="@training.CoverPicture" alt="Cover" />
                        }
                        else
                        {
                            <div class="flex h-full w-full items-center justify-center bg-gradient-to-br from-[#640A16] via-[#8B1538] to-[#640A16] text-white">
                                <span class="material-symbols-outlined text-4xl opacity-50">image</span>
                                <span class="ml-2 text-sm font-semibold">No Image</span>
                            </div>
                        }
                    </div>

                    <div class="flex flex-grow flex-col p-4">
                        <div class="mb-2 flex items-center justify-between">
                            <h2 class="text-xl font-bold text-gray-800">@training.TrainingName</h2>
                            <div class="flex gap-2 text-gray-600">
                                <span class="material-symbols-outlined cursor-pointer hover:text-black"
                                      onclick="openEditTraining('@training.Id', '@training.TrainingName', '@training.TrainingCategoryId', '@training.SkillLevel', '@training.Duration', '@training.CourseCode', '@training.Description', '@training.CoverPicture')">edit</span>
                                <span class="material-symbols-outlined cursor-pointer text-red-500 hover:text-red-700"
                                      onclick="openDeleteTraining('@training.Id', '@training.TrainingName', '@training.TrainingCategoryId', '@training.SkillLevel', '@training.CourseCode', '@training.Description', '@training.CoverPicture', '@training.UpdatedTime', '@training.AccountFirstName', '@training.AccountLastName')">delete</span>
                            </div>
                        </div>
                        <div class="mb-2 flex gap-2">
                            @if (!string.IsNullOrEmpty(training.SkillLevelName))
                            {
                                var skillColor = training.SkillLevelName == "Beginner" ? "bg-green-200 text-green-800"
                                                : training.SkillLevelName == "Intermediate" ? "bg-yellow-200 text-yellow-800"
                                                : "bg-red-200 text-red-800";
                                <span class="rounded-full px-3 py-1 text-xs font-semibold @skillColor">
                                    @training.SkillLevelName
                                </span>
                            }
                            @if (!string.IsNullOrEmpty(training.TrainingCategoryName))
                            {
                                <span class="rounded-full bg-orange-200 px-3 py-1 text-xs font-semibold text-orange-800">
                                    @training.TrainingCategoryName
                                </span>
                            }
                        </div>
                        <p class="mt-2 line-clamp-3 text-sm text-gray-600">@training.Description</p>
                        <div class="mt-auto flex items-end justify-between pt-4 text-xs text-gray-500">
                            <div>
                                <p><strong>Modified:</strong> @training.UpdatedTime.ToString("MMM dd, yyyy")</p>
                                <p><strong>By:</strong> @training.AccountFirstName @training.AccountLastName</p>
                            </div>
                            <a href="@Url.Action("AdminTrainingTopics", "AdminTraining", new { trainingId = training.Id })"
                               class="rounded-full bg-[#640A16] px-4 py-2 text-xs font-bold text-white transition hover:bg-[#4e0712]">
                                Access
                            </a>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-span-3 py-8 text-center text-gray-500">No trainings found.</div>
        }
    </div>

    <!-- Pagination -->
    @if (ViewBag.TotalCount > ViewBag.PageSize)
    {
        var totalPages = (int)Math.Ceiling((decimal)ViewBag.TotalCount / ViewBag.PageSize);
        <div class="mt-10 flex justify-end">
            <nav>
                <ul class="inline-flex gap-1 text-sm">
                    @if (ViewBag.CurrentPage > 1)
                    {
                        <li>
                            <a class="rounded-l-full border border-gray-300 bg-white px-3 py-2 text-gray-600 transition hover:bg-gray-100"
                                href="@(isCategory
                                    ? Url.Action("TrainingCategoryDetails", new { categoryId = categoryId, page = ViewBag.CurrentPage - 1, search = search })
                                    : Url.Action("AdminTraining", new { page = ViewBag.CurrentPage - 1, search = search, categoryId = selectedCategoryId, skillLevelId = skillLevelId }))">
                                Previous
                            </a>
                        </li>
                    }
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        <li>
                            <a class="rounded-md border border-gray-300 px-3 @(i == ViewBag.CurrentPage ? "bg-blue-50 text-blue-600" : "bg-white text-gray-600 hover:bg-gray-100 hover:text-gray-800") py-2 transition"
                                href="@(isCategory
                                    ? Url.Action("TrainingCategoryDetails", new { categoryId = categoryId, page = i, search = search })
                                    : Url.Action("AdminTraining", new { page = i, search = search, categoryId = selectedCategoryId, skillLevelId = skillLevelId }))">
                                @i
                            </a>
                        </li>
                    }
                    @if (ViewBag.CurrentPage < totalPages)
                    {
                        <li>
                            <a class="rounded-r-full border border-gray-300 bg-white px-3 py-2 text-gray-600 transition hover:bg-gray-100"
                                href="@(isCategory
                                    ? Url.Action("TrainingCategoryDetails", new { categoryId = categoryId, page = ViewBag.CurrentPage + 1, search = search })
                                    : Url.Action("AdminTraining", new { page = ViewBag.CurrentPage + 1, search = search, categoryId = selectedCategoryId, skillLevelId = skillLevelId }))">
                                Next
                            </a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    }
</div>

<!-- Modals -->
@await Html.PartialAsync("~/Views/Admin/AddTraining.cshtml", new TrainingViewModel())
@await Html.PartialAsync("~/Views/Admin/EditTraining.cshtml", new TrainingViewModel())
@await Html.PartialAsync("~/Views/Admin/DeleteTraining.cshtml", new TrainingViewModel())

<div id="viewUserModalContainer"></div>

<script>
    function addTraining() {
        document.getElementById('addTraining').classList.remove('hidden');
    }
    function closeAddTraining() {
        document.getElementById('addTraining').classList.add('hidden');
    }
    function closeEditTraining() {
        document.getElementById('editTraining').classList.add('hidden');
    }
    function closeDeleteTraining() {
        document.getElementById('deleteTraining').classList.add('hidden');
    }
    document.addEventListener('DOMContentLoaded', function () {
        const searchInput = document.getElementById('search-input');
        const filterBox = document.getElementById('filter-pills-inside');

        searchInput.addEventListener('focus', () => {
            filterBox.classList.remove('hidden');
        });

        searchInput.addEventListener('blur', () => {
            setTimeout(() => {
                if (!document.activeElement.closest('#filter-pills-inside')) {
                    filterBox.classList.add('hidden');
                }
            }, 300); 
        });
    });
</script>
