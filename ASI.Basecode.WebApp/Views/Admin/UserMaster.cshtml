@model ASI.Basecode.Services.ServiceModels.AdminCreateUserViewModel

@{
    ViewData["Title"] = "UserMaster Page";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var filter = Context.Request.Query["filter"].ToString() ?? "all";
}

@if (TempData["Success"] != null)
{
    <div class="mx-20 my-3 rounded bg-green-100 px-4 py-2 text-green-800">
        ‚úÖ @TempData["Success"]
    </div>
}

@if (TempData["FormError"] != null)
{
    <div class="mx-20 my-3 rounded bg-red-100 px-4 py-2 text-red-800">
        ‚ö†Ô∏è @TempData["FormError"]
    </div>
}

<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />

<!-- Header -->
<div class="mx-20 mt-12 mb-6 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
    <h1 class="text-4xl font-bold uppercase text-gray-800">User Panel</h1>

    <form class="w-full sm:w-auto" method="get" action="@Url.Action("UserMaster")">
        <input type="hidden" name="filter" value="@filter" />
        <div class="relative w-full sm:w-[380px]">
            <input type="search" name="search" id="default-search"
                   class="w-full h-12 rounded-full border border-gray-300 px-5 pr-[90px] text-sm text-gray-900 shadow-sm focus:outline-none focus:ring-2 focus:ring-[#EAC231] transition"
                   placeholder="Search Users..." value="@Context.Request.Query["search"]" />
            <button type="submit"
                    class="absolute top-[6px] right-2 rounded-full bg-[#EAC231] px-4 py-2 text-sm font-medium text-black hover:bg-[#cfa221] transition">
                Search
            </button>
        </div>
    </form>
</div>

<hr class="mx-20 my-4 border-t-2 border-[#640A16]" />

<!-- Filter Tabs and Add User -->
<div class="mx-20 mb-6 flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
    <div class="flex gap-6 text-base font-medium text-gray-600">
        <a href="@Url.Action("UserMaster", new { page = 1, filter = "all" })" class="hover:text-black transition">All (@Model.TotalUsers)</a>
        <a href="@Url.Action("UserMaster", new { page = 1, filter = "admin" })" class="hover:text-black transition">Admin (@Model.TotalAdmins)</a>
        <a href="@Url.Action("UserMaster", new { page = 1, filter = "guest" })" class="hover:text-black transition">Guest (@Model.TotalGuests)</a>
    </div>

    <button onclick="openModal()" class="rounded-full bg-[#EAC231] px-5 py-2 text-sm font-semibold text-black shadow-md hover:bg-[#cfa221] transition">
        Add User +
    </button>
</div>

<!-- Table -->
<div class="mx-20 overflow-x-auto rounded-xl shadow-lg bg-white">
    <table class="w-full text-left text-sm text-black">
        <thead class="bg-[#640A16] text-white text-sm uppercase tracking-wide">
            <tr>
                <th scope="col" class="px-6 py-3 text-left">User</th>
                <th scope="col" class="px-6 py-3 text-left">Position</th>
                <th scope="col" class="px-6 py-3 text-center">Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Users != null && Model.Users.Any())
            {
                foreach (var user in Model.Users)
                {
                    <tr class="border-b hover:bg-gray-50 transition">
                        <th scope="row" class="flex items-center gap-3 whitespace-nowrap px-6 py-4 text-sm text-gray-900">
                            @if (!string.IsNullOrEmpty(user.ProfilePicture))
                            {
                                <img src="@user.ProfilePicture" alt="Profile" class="h-10 w-10 rounded-full object-cover" />
                            }
                            else
                            {
                                <span class="text-2xl">üë§</span>
                            }
                            <span>@($"{user.FirstName} {user.LastName}")</span>
                        </th>

                        <td class="px-6 py-4 text-sm text-gray-700">@(user.Role == 0 ? "Admin" : "Guest")</td>

                        <td class="px-6 py-4">
                            <div class="flex justify-center gap-5 text-gray-600">
                                <a href="javascript:void(0);" onclick="editDetails(@user.Id)">
                                    <span class="material-symbols-outlined text-[22px] hover:text-black transition cursor-pointer">Edit</span>
                                </a>
                                <a href="javascript:void(0);" onclick="viewDetails(@user.Id)">
                                    <span class="material-symbols-outlined text-[22px] hover:text-black transition cursor-pointer">Visibility</span>
                                </a>
                                <a onclick="deleteProfile(@user.Id, '@user.FirstName @user.LastName', '@(user.ProfilePicture ?? "")')">
                                    <span class="material-symbols-outlined text-[22px] text-red-600 hover:text-red-800 transition cursor-pointer">Delete</span>
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="3" class="py-4 text-center text-gray-500">No users found.</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Pagination -->
<div class="mx-20 mt-10 flex justify-end">
    <nav aria-label="Page navigation">
        <ul class="flex gap-1 text-sm">
            @if (Model.CurrentPage > 1)
            {
                <li>
                    <a href="@Url.Action("UserMaster", new { page = Model.CurrentPage - 1, filter = filter })"
                       class="px-3 py-2 rounded-l-full border border-gray-300 bg-white text-gray-600 hover:bg-gray-100 hover:text-black transition">Prev</a>
                </li>
            }

            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li>
                    <a href="@Url.Action("UserMaster", new { page = i, filter = filter })"
                       class="px-3 py-2 border border-gray-300 bg-white text-gray-600 hover:bg-gray-100 hover:text-black transition @(i == Model.CurrentPage ? "bg-[#EAC231] text-black font-semibold" : "")">@i</a>
                </li>
            }

            @if (Model.CurrentPage < Model.TotalPages)
            {
                <li>
                    <a href="@Url.Action("UserMaster", new { page = Model.CurrentPage + 1, filter = filter })"
                       class="px-3 py-2 rounded-r-full border border-gray-300 bg-white text-gray-600 hover:bg-gray-100 hover:text-black transition">Next</a>
                </li>
            }
        </ul>
    </nav>
</div>

@await Html.PartialAsync("_UserAddModal")
@await Html.PartialAsync("_UserEditModal")
@await Html.PartialAsync("_UserDeleteModal")

<!-- AJAX dynamic modal content -->
<div id="viewUserModalContainer"></div>

<script>
    function openModal() {
        document.getElementById('addUserModal').classList.remove('hidden');
    }

    function closeModal() {
        const modal = document.getElementById('addUserModal');
        modal.classList.add('hidden');

        const form = document.getElementById("createuserform");
        if (form) {
            form.reset();
            const validator = $(form).validate();
            validator.resetForm();
            $(form).find(".input-validation-error").removeClass("input-validation-error");
        }
    }

    function editDetails(userId) {
        // Fetch user data and populate the edit modal
        fetch(`/Admin/GetUserForEdit?userId=${userId}`)
            .then(response => {
                if (!response.ok) throw new Error("Unable to fetch user data.");
                return response.json();
            })
            .then(user => {
                // Populate the edit modal with user data
                document.getElementById('editUserIdInput').value = user.id;
                document.getElementById('editFirstName').value = user.firstName;
                document.getElementById('editLastName').value = user.lastName;
                document.getElementById('editEmail').value = user.emailId;
                document.getElementById('editContact').value = user.contact || '';
                document.getElementById('editRole').value = user.role;
                
                // Handle birthdate
                if (user.birthdate) {
                    const birthdate = new Date(user.birthdate);
                    document.getElementById('editBirthdate').value = birthdate.toISOString().split('T')[0];
                } else {
                    document.getElementById('editBirthdate').value = '';
                }

                // Handle profile picture
                const profileImage = document.getElementById('editProfileImage');
                const placeholder = document.getElementById('editProfilePlaceholder');
                const container = document.getElementById('editProfileImageContainer');
                const existingProfilePictureInput = document.getElementById('editExistingProfilePicture');
                
                if (user.profilePicture) {
                    profileImage.src = user.profilePicture;
                    profileImage.classList.remove('hidden');
                    placeholder.classList.add('hidden');
                    container.style.background = 'transparent';
                    // Set the existing profile picture URL in the hidden input
                    existingProfilePictureInput.value = user.profilePicture;
                } else {
                    profileImage.classList.add('hidden');
                    placeholder.classList.remove('hidden');
                    container.style.background = '#FFE9C6';
                    // Clear the hidden input if no existing profile picture
                    existingProfilePictureInput.value = '';
                }

                // Update user info display
                document.getElementById('editUserName').textContent = `${user.firstName} ${user.lastName}`;
                document.getElementById('editUserId').textContent = `ID: ${user.id}`;
                document.getElementById('editUserEmail').textContent = user.emailId;
                
                if (user.createdTime) {
                    const createdDate = new Date(user.createdTime);
                    document.getElementById('editUserCreated').textContent = `Account Created: ${createdDate.toLocaleDateString()}`;
                } else {
                    document.getElementById('editUserCreated').textContent = 'Account Created: N/A';
                }

                // Show the edit modal
                document.getElementById('editUserModal').classList.remove('hidden');
            })
            .catch(error => {
                alert(error.message);
            });
    }

    function closeEditDetails() {
        document.getElementById('editUserModal').classList.add('hidden');
        
        // Reset the edit form
        const form = document.getElementById("editUserForm");
        if (form) {
            form.reset();
        }
        
        // Reset profile image
        const profileImage = document.getElementById('editProfileImage');
        const placeholder = document.getElementById('editProfilePlaceholder');
        const container = document.getElementById('editProfileImageContainer');
        const existingProfilePictureInput = document.getElementById('editExistingProfilePicture');
        
        profileImage.classList.add('hidden');
        placeholder.classList.remove('hidden');
        container.style.background = '#FFE9C6';
        existingProfilePictureInput.value = '';
    }

    function closeViewDetails() {
        const modal = document.getElementById('viewUserModal');
        if (modal) {
            modal.remove();
        }
    }

    function viewDetails(id) {
        fetch(`/Admin/ViewUserDetails?userId=${id}`)
            .then(response => {
                if (!response.ok) throw new Error("Unable to fetch user.");
                return response.text();
            })
            .then(html => {
                document.getElementById("viewUserModalContainer").innerHTML = html;
            })
            .catch(error => {
                alert(error.message);
            });
    }

    function deleteProfile(userId, userName, profilePicUrl) {
        // Show modal
        document.getElementById('deleteUserModal').classList.remove('hidden');
        // Set user info in modal
        document.getElementById('deleteUserName').textContent = userName;
        document.getElementById('deleteUserId').textContent = `ID: ${userId}`;
        // Set profile picture or emoji
        const profileImg = document.getElementById('deleteUserProfilePic');
        const profileEmoji = document.getElementById('deleteUserProfileEmoji');
        const profileContainer = profileImg.parentElement;
        if (profilePicUrl && profilePicUrl.trim() !== "") {
            profileImg.src = profilePicUrl;
            profileImg.classList.remove('hidden');
            profileEmoji.classList.add('hidden');
            profileContainer.style.background = 'transparent';
        } else {
            profileImg.src = "";
            profileImg.classList.add('hidden');
            profileEmoji.classList.remove('hidden');
            profileContainer.style.background = '#FFE9C6';
        }
        // Remove previous event listeners
        const confirmBtn = document.getElementById('confirmDeleteBtn');
        const newBtn = confirmBtn.cloneNode(true);
        confirmBtn.parentNode.replaceChild(newBtn, confirmBtn);
        // Add new event listener
        newBtn.addEventListener('click', function () {
            handleDeleteUser(userId);
        });
    }

    function closeDeleteProfile() {
        document.getElementById('deleteUserModal').classList.add('hidden');
    }

    function handleDeleteUser(userId) {
        fetch(`/Admin/DeleteUser`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
            },
            body: `id=${userId}`
        })
        .then(response => {
            if (response.redirected) {
                window.location.href = response.url;
            } else if (response.ok) {
                window.location.reload();
            } else {
                alert('Failed to delete user.');
            }
        })
        .catch(() => {
            alert('Failed to delete user.');
        });
    }
</script>