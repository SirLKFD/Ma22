@model ASI.Basecode.Services.ServiceModels.AdminCreateUserViewModel
@{
    ViewData["Title"] = "UserMaster Page";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var filter = Context.Request.Query["filter"].ToString() ?? "all";
}

@if (TempData["Success"] != null)
{
    <div class="mx-20 my-3 rounded bg-green-100 px-4 py-2 text-green-800">
        ✅ @TempData["Success"]
    </div>
}

@if (TempData["FormError"] != null)
{
    <div class="mx-20 my-3 rounded bg-red-100 px-4 py-2 text-red-800">
        ⚠️ @TempData["FormError"]
    </div>
}


<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />

<div class="mx-20 mb-2 mt-10 flex items-center justify-between">
    <h1 class="font-weight-bold text-4xl uppercase">User Panel</h1>

    <form class="max-w-md" method="get" action="@Url.Action("UserMaster")">
        <input type="hidden" name="filter" value="@filter" />
        <div class="relative">
            <input type="search" name="search" id="default-search"
                   class="block h-[50px] w-[380px] rounded-xl border border-gray-300 bg-[#fff] px-5 text-sm text-gray-900"
                   placeholder="Search Users..." />
            <button type="submit"
                    class="absolute bottom-1.5 end-2.5 rounded-lg bg-[#EAC231] px-3 py-2 text-sm font-medium text-black hover:bg-[#cfa221]">
                Search
            </button>
        </div>
    </form>
</div>

<hr class="mx-20 my-4 border-t-2 border-[#640A16]" />

<div class="mx-20 mb-4 flex flex-row items-center justify-between rounded-xl p-2">
    <div class="flex flex-row gap-20 text-xl">
        <a href="@Url.Action("UserMaster", new { page = 1, filter = "all" })">All (@Model.TotalUsers)</a>
        <a href="@Url.Action("UserMaster", new { page = 1, filter = "admin" })">Admin (@Model.TotalAdmins)</a>
        <a href="@Url.Action("UserMaster", new { page = 1, filter = "guest" })">Guest (@Model.TotalGuests)</a>
    </div>

    <div>
        <button onclick="openModal()" class="rounded-lg bg-[#EAC231] p-2 text-sm font-medium hover:bg-[#cfa221]">
            Add User +
        </button>
    </div>
</div>

<div class="mx-20 overflow-x-auto rounded-xl">
    <table class="w-full text-left text-sm text-black">
        <thead class="bg-[#640A16] text-center text-xl text-white">
            <tr>
                <th scope="col" class="px-6 py-3 text-left">User</th>
                <th scope="col" class="px-6 py-3 text-left">Position</th>
                <th scope="col" class="px-6 py-3">Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Users != null && Model.Users.Any())
            {
                foreach (var user in Model.Users)
                {
                    <tr class="border-b border-gray-200 bg-white dark:border-gray-700 dark:bg-gray-800">
                        <th scope="row" class="whitespace-nowrap px-6 py-4 font-medium text-black">
                            @($"{user.FirstName} {user.LastName}")
                        </th>
                        <td class="px-6 py-4">@(user.Role == 0 ? "Admin" : "Guest")</td>
                        <td class="px-6 py-4">
                            <div class="flex justify-center gap-5">
                                <a href="#"><span class="material-symbols-outlined text-[25px]">Edit</span></a>
                                <a href="#"><span class="material-symbols-outlined text-[25px]">Visibility</span></a>
                                <a href="#"><span class="material-symbols-outlined text-[25px]">Delete</span></a>
                            </div>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="3" class="py-4 text-center">No users found.</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="mx-20 my-10 flex justify-end">
    <nav aria-label="Page navigation">
        <ul class="flex h-8 items-center -space-x-px text-sm">
            @if (Model.CurrentPage > 1)
            {
                <li>
                    <a href="@Url.Action("UserMaster", new { page = Model.CurrentPage - 1, filter = filter })"
                       class="flex h-8 items-center justify-center rounded-s-lg border border-gray-300 px-3 hover:bg-gray-100">Prev</a>
                </li>
            }

            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li>
                    <a href="@Url.Action("UserMaster", new { page = i, filter = filter })"
                       class="flex h-8 items-center justify-center border border-gray-300 px-3 @(i == Model.CurrentPage ? "bg-gray-300" : "hover:bg-gray-100")">
                        @i
                    </a>
                </li>
            }

            @if (Model.CurrentPage < Model.TotalPages)
            {
                <li>
                    <a href="@Url.Action("UserMaster", new { page = Model.CurrentPage + 1, filter = filter })"
                       class="flex h-8 items-center justify-center rounded-e-lg border border-gray-300 px-3 hover:bg-gray-100">Next</a>
                </li>
            }
        </ul>
    </nav>
</div>

@await Html.PartialAsync("_UserAddModal")
@await Html.PartialAsync("_UserEditModal")

<script>
    function openModal() {
        document.getElementById('addUserModal').classList.remove('hidden');
    }

    function closeModal() {
        const modal = document.getElementById('addUserModal');
        modal.classList.add('hidden');

        const form = document.getElementById("createuserform");
        if (form) {
            form.reset();
            const validator = $(form).validate();
            validator.resetForm();
            $(form).find(".input-validation-error").removeClass("input-validation-error");
        }
    }
</script>
